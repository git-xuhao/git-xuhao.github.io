{"total":39,"pageSize":10,"pageCount":4,"data":[{"title":"C语言（七）文件的相关操作","slug":"c/c-file-operation","date":"2016-08-29T09:12:26.000Z","updated":"2017-12-18T16:00:37.000Z","comments":true,"path":"api/articles/c/c-file-operation.json","excerpt":"<h2 id=\"C语言文件的打开与关闭\"><a href=\"#C语言文件的打开与关闭\" class=\"headerlink\" title=\"C语言文件的打开与关闭\"></a><strong>C语言文件的打开与关闭</strong></h2><hr>\n<p>在C语言中，文件操作都是由库函数来完成的，我们就来总结文件的相关的操作。</p>\n<h3 id=\"文件的打开-fopen函数\"><a href=\"#文件的打开-fopen函数\" class=\"headerlink\" title=\"文件的打开(fopen函数)\"></a><strong>文件的打开(fopen函数)</strong></h3><p>fopen() 函数用来打开一个文件，它的格式为：</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FILE</span> *fopen(<span class=\"built_in\">char</span> *filename, <span class=\"built_in\">char</span> *<span class=\"keyword\">type</span>);</span><br></pre></td></tr></table></figure>\n<p>filename为文件名（包括文件路径），type为打开方式，它们都是字符串。fopen() 会获取文件信息，包括文件名、文件状态、当前读写位置等，并将这些信息保存到一个FILE类型的结构体变量中，然后将该变量的地址返回。</p>\n<p>如果接收 fopen() 的返回值，就需要定义一个 FILE 类型的指针。例如：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILE *<span class=\"built_in\">fp</span> = (<span class=\"string\">\"demo.txt\"</span>, <span class=\"string\">\"r\"</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>","keywords":null,"cover":null,"content":null,"text":"C语言文件的打开与关闭在C语言中，文件操作都是由库函数来完成的，我们就来总结文件的相关的操作。文件的打开(fopen函数)fopen() 函数用来打开一个文件，它的格式为：1<br>FILE *fopen(char *filename, char *type);<br>filen","link":"","raw":null,"photos":[],"categories":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/categories/C-C.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}]},{"title":"C语言（六）结构体和联合体","slug":"c/structure-union","date":"2016-08-24T16:18:26.000Z","updated":"2017-12-17T15:57:45.000Z","comments":true,"path":"api/articles/c/structure-union.json","excerpt":"<h3 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a><strong>结构体</strong></h3><p>在C语言中，可以使用结构体（Struct）来存放一组不同类型的数据。结构体的定义形式为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体名&#123;</span></span><br><span class=\"line\">    结构体所包含的变量或数组</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>结构体是一种集合，它里面包含了多个变量或数组，它们的类型可以相同，也可以不同，每个这样的变量或数组都称为结构体的成员（Member）。请看下面的一个栗子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stu</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;  <span class=\"comment\">//学号</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;  <span class=\"comment\">//年龄</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> group;  <span class=\"comment\">//所在学习小组</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> score;  <span class=\"comment\">//成绩</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","keywords":null,"cover":null,"content":null,"text":"结构体在C语言中，可以使用结构体（Struct）来存放一组不同类型的数据。结构体的定义形式为：1<br>2<br>3<br>struct 结构体名&#123;<br>    结构体所包含的变量或数组<br>&#125;;<br>结构体是一种集合，它里面包含了多个变量或数组，它们的","link":"","raw":null,"photos":[],"categories":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/categories/C-C.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}]},{"title":"C语言（五）内存分配与释放","slug":"c/memory_allocation","date":"2016-08-23T05:10:26.000Z","updated":"2017-12-18T16:01:01.000Z","comments":true,"path":"api/articles/c/memory_allocation.json","excerpt":"<p>首先我们来科普一下：</p>\n<h2 id=\"什么是堆？说到堆，又忍不住说到了栈！什么是-栈？\"><a href=\"#什么是堆？说到堆，又忍不住说到了栈！什么是-栈？\" class=\"headerlink\" title=\"什么是堆？说到堆，又忍不住说到了栈！什么是 栈？\"></a><strong>什么是堆？说到堆，又忍不住说到了栈！什么是 栈？</strong></h2><p><strong>1、什么是堆：</strong>堆是大家共有的空间，分全局堆和局部堆。全局堆就是所有没有分配的空间，局部堆就是用户分配的空间。堆在操作系统对进程 初始化的时候分配，运行过程中也可以向系统要额外的堆，但是记得用完了要还给操作系统，要不然就是内存泄漏。<br><strong>2、什么是栈：</strong>栈是线程独有的，保存其运行状态和局部自动变量的。栈在线程开始的时候初始化，每个线程的栈互相独立。每个函数都有自己的栈，栈被用来在函数之间传递参数。操作系统在切换线程的时候会自动的切换栈，就是切换SS/ESP寄存器。栈空间不需要在高级语言里面显式的分配和释放。<br>","keywords":null,"cover":null,"content":null,"text":"首先我们来科普一下：什么是堆？说到堆，又忍不住说到了栈！什么是 栈？1、什么是堆：堆是大家共有的空间，分全局堆和局部堆。全局堆就是所有没有分配的空间，局部堆就是用户分配的空间。堆在操作系统对进程 初始化的时候分配，运行过程中也可以向系统要额外的堆，但是记得用完了要还给操作系统，要","link":"","raw":null,"photos":[],"categories":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/categories/C-C.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}]},{"title":"C语言（四）指针概念的理解","slug":"c-pointers","date":"2016-08-22T06:41:06.000Z","updated":"2017-12-18T16:01:59.000Z","comments":true,"path":"api/articles/c-pointers.json","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>最近真的是忙的不可开交，公司一直给安排任务，连学习和写笔记的时间都没有了，落下好几次课的笔记都没有写，所以我抽空把目前的进度给追上来，不然会越落越多。加油吧~（感觉身体都要被掏空了） </p>\n<h2 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a><strong>指针</strong></h2><p> 我们通过指针，可以简化一些 C 编程任务的执行，还有一些任务，如动态内存分配，没有指针是无法执行的。所以，学习指针是很有必要的。<br>正如您所知道的，每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号（&amp;）运算符访问的地址，它表示了在内存中的一个地址。请看下面的实例，它将输出定义的变量地址：</p>","keywords":null,"cover":"http://img.blog.csdn.net/20160821214956473","content":null,"text":"前言最近真的是忙的不可开交，公司一直给安排任务，连学习和写笔记的时间都没有了，落下好几次课的笔记都没有写，所以我抽空把目前的进度给追上来，不然会越落越多。加油吧~（感觉身体都要被掏空了） 指针 我们通过指针，可以简化一些 C 编程任务的执行，还有一些任务，如动态内存分配，没有指针","link":"","raw":null,"photos":[],"categories":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/categories/C-C.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}]},{"title":"C语言（三）字符串处理函数","slug":"c/language/string","date":"2016-08-13T11:30:00.000Z","updated":"2017-12-18T16:00:43.000Z","comments":true,"path":"api/articles/c/language/string.json","excerpt":"<p>C语言提供了丰富的字符串处理函数，例如字符串的输入、输出、合并、修改、比较、转换、复制、搜索等，使用这些现成的函数可大大减轻编程的负担。</p>\n<p>用于输入输出的字符串函数，例如printf、puts、scanf、gets等，使用时应包含头文件stdio.h，使用其它字符串函数则应包含头文件string.h。</p>","keywords":null,"cover":null,"content":null,"text":"C语言提供了丰富的字符串处理函数，例如字符串的输入、输出、合并、修改、比较、转换、复制、搜索等，使用这些现成的函数可大大减轻编程的负担。用于输入输出的字符串函数，例如printf、puts、scanf、gets等，使用时应包含头文件stdio.h，使用其它字符串函数则应包含头文件","link":"","raw":null,"photos":[],"categories":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/categories/C-C.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}]},{"title":"C语言（二）有符号和无符号的理解","slug":"c/language/signed","date":"2016-08-07T07:43:20.000Z","updated":"2017-12-18T16:00:48.000Z","comments":true,"path":"api/articles/c/language/signed.json","excerpt":"<h3 id=\"1-你自已决定是否需要有正负：\"><a href=\"#1-你自已决定是否需要有正负：\" class=\"headerlink\" title=\"1.你自已决定是否需要有正负：\"></a><strong>1.你自已决定是否需要有正负：</strong></h3><p>就像我们必须决定某个量使用整数还是实数，使用多大的范围数一样，我们必须自已决定某个量是否需要正负。如果这个量不会有负值，那么我们可以定它为带正负的类型。</p>\n<p>在计算机中，可以区分正负的类型，称为有符类型（signed），无正负的类型（只有正值），称为无符类型。 （unsigned）数值类型分为整型或实型，其中整型又分为无符类型或有符类型，而实型则只有符类型。 字符类型也分为有符和无符类型。 比如有两个量，年龄和库存，我们可以定前者为无符的字符类型，后者定为有符的整数类型。</p>\n<h3 id=\"2-使用二制数中的最高位表示正负\"><a href=\"#2-使用二制数中的最高位表示正负\" class=\"headerlink\" title=\"2.使用二制数中的最高位表示正负: \"></a><strong>2.使用二制数中的最高位表示正负: </strong></h3><p>首先得知道最高位是哪一位？1个字节的类型，如字符类型，最高位是第7位，2个字节的数，最高位是第15位，4个字节的数，最高位是第31位。不同长度的数值类型，其最高位也就不同，但总是最左边的那位（如下示意）。字符类型固定是1个字节，所以最高位总是第7位。</p>","keywords":null,"cover":"http://img.blog.csdn.net/20160807123518124","content":null,"text":"1.你自已决定是否需要有正负：就像我们必须决定某个量使用整数还是实数，使用多大的范围数一样，我们必须自已决定某个量是否需要正负。如果这个量不会有负值，那么我们可以定它为带正负的类型。在计算机中，可以区分正负的类型，称为有符类型（signed），无正负的类型（只有正值），称为无符类","link":"","raw":null,"photos":[],"categories":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/categories/C-C.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}]},{"title":"C语言（一）的基本数据类型","slug":"c-language","date":"2016-08-06T23:00:33.000Z","updated":"2017-12-18T16:00:16.000Z","comments":true,"path":"api/articles/c-language.json","excerpt":"<h2 id=\"C语言helloworld\"><a href=\"#C语言helloworld\" class=\"headerlink\" title=\"C语言helloworld\"></a>C语言helloworld</h2><hr>\n<p>1.声明头文件，相当于java的导包。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//只有函数的声明，编译时会去找到函数的实现</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure>","keywords":null,"cover":"http://img.blog.csdn.net/20160806212417802","content":null,"text":"C语言helloworld1.声明头文件，相当于java的导包。1<br>2<br>  //只有函数的声明，编译时会去找到函数的实现<br>#include &lt;stdio.h&gt;<br>2.写main()方法 1<br>2<br>3<br>main()&#123;<br","link":"","raw":null,"photos":[],"categories":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/categories/C-C.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}]},{"title":"Android 性能检测工具","slug":"performance_tests","date":"2016-06-27T06:34:00.000Z","updated":"2017-12-17T15:35:13.000Z","comments":true,"path":"api/articles/performance_tests.json","excerpt":"<h4 id=\"Android常见问题\"><a href=\"#Android常见问题\" class=\"headerlink\" title=\"Android常见问题\"></a>Android常见问题</h4><ul>\n<li><p>内存泄漏：不使用的内存空间(对象)一直被引用着没有得到释放。</p>\n</li>\n<li><p>内存抖动：短时间内大量创建对象又在短时间内频繁触发GC导致内存波动很大，android虚拟机执行GC操作时需要耗费CPU性能频繁GC会到来严重的性能问题。内存抖动是因为大量的对象被创建又在短时间内马上被释放。瞬间产生大量的对象会严重占用Young Generation的内存区域，当达到阀值，剩余空间不够的时候，也会触发GC。即使每次分配的对象占用了很少的内存，但是他们叠加在一起会增加Heap的压力，从而触发更多其他类型的GC。这个操作有可能会影响到帧率，并使得用户感知到性能问题。</p>","keywords":null,"cover":null,"content":null,"text":"Android常见问题内存泄漏：不使用的内存空间(对象)一直被引用着没有得到释放。内存抖动：短时间内大量创建对象又在短时间内频繁触发GC导致内存波动很大，android虚拟机执行GC操作时需要耗费CPU性能频繁GC会到来严重的性能问题。内存抖动是因为大量的对象被创建又在短时间内马","link":"","raw":null,"photos":[],"categories":[{"name":"Android","slug":"Android","count":11,"path":"api/categories/Android.json"}],"tags":[{"name":"Android","slug":"Android","count":11,"path":"api/tags/Android.json"},{"name":"性能优化","slug":"性能优化","count":1,"path":"api/tags/性能优化.json"}]},{"title":"Android 自定义一款炫酷的加载控件","slug":"Android-custom-loadingview","date":"2016-05-13T14:13:33.000Z","updated":"2017-12-17T15:42:38.000Z","comments":true,"path":"api/articles/Android-custom-loadingview.json","excerpt":"<h2 id=\"概述：\"><a href=\"#概述：\" class=\"headerlink\" title=\"概述：\"></a><strong>概述：</strong></h2><p>在设计应用的时候，我们应该热爱极简主义，简单就是好的，对于很多用户来说，复杂的东西并不受欢迎。<br>我要实现的是根据不同的情况去显示不同的加载效果，随用随调，效果是借鉴于某一项目的效果，我认为有必要提取出来改善封装一下，供以后使用。情况大致分为：加载中、无网络、无数据、加载失败等；<br>","keywords":null,"cover":"http://img.blog.csdn.net/20160519152132230","content":null,"text":"概述：在设计应用的时候，我们应该热爱极简主义，简单就是好的，对于很多用户来说，复杂的东西并不受欢迎。<br>我要实现的是根据不同的情况去显示不同的加载效果，随用随调，效果是借鉴于某一项目的效果，我认为有必要提取出来改善封装一下，供以后使用。情况大致分为：加载中、无网络、无数据、加","link":"","raw":null,"photos":[],"categories":[{"name":"Android","slug":"Android","count":11,"path":"api/categories/Android.json"}],"tags":[{"name":"Android","slug":"Android","count":11,"path":"api/tags/Android.json"}]},{"title":"基于Hexo+GitHub Pages 搭建个人博客教程","slug":"hexo-github-pages","date":"2016-05-06T07:44:04.000Z","updated":"2017-12-17T15:10:40.000Z","comments":true,"path":"api/articles/hexo-github-pages.json","excerpt":"<p><img src=\"https://raw.githubusercontent.com/git-xuhao/Source/master/blog/img/img_hexo_logo.jpeg\" alt=\"这里写图片描述\"></p>\n<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要 :\"></a>摘要 :</h2><p>这是一篇有关如何使用Github Pages和Hexo搭建自己独立博客的详尽教程，里面介绍了如何使用和配置Hexo框架，如何将Hexo部署到自己的Github项目中，域名注册，以及域名的绑定等功能。<br>","keywords":null,"cover":"https://raw.githubusercontent.com/git-xuhao/Source/master/blog/img/img_hexo_logo.jpeg","content":null,"text":" [Figure] 希望大家能够指点或提出宝贵意见，谢谢！一起学习；","link":"","raw":null,"photos":[],"categories":[{"name":"教程","slug":"教程","count":2,"path":"api/categories/教程.json"}],"tags":[{"name":"Hexo","slug":"Hexo","count":1,"path":"api/tags/Hexo.json"},{"name":"GitHub","slug":"GitHub","count":1,"path":"api/tags/GitHub.json"}]}]}