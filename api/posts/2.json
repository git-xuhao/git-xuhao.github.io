{"total":39,"pageSize":10,"pageCount":4,"data":[{"title":"Shell 脚本基础学习（一）","slug":"linux/shell-script-01","date":"2016-09-29T05:06:31.000Z","updated":"2017-12-17T16:07:38.000Z","comments":true,"path":"api/articles/linux/shell-script-01.json","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Linux shell 脚本基础我们将分几篇文章来记录，希望对我们这些初次接触Linxu shell脚本编程的初学者有帮助；<br>Linxu shell 脚本基础学习先来介绍shell的语法，开头、注释、变量和环境，虽然不涉及到具体的东西，但是大号基础是以后学习的前提，很多时候我们拿到别人的开源库，需要编译使用，但是由于各种原因，总是编译不成功，其中就有shell 脚本，如果我们看不懂别人的脚本，编译出错，还查不来原因。（比如一个空格导致编译失败，你能查出原因么？）<br>","keywords":null,"cover":null,"content":null,"text":"前言Linux shell 脚本基础我们将分几篇文章来记录，希望对我们这些初次接触Linxu shell脚本编程的初学者有帮助；<br>Linxu shell 脚本基础学习先来介绍shell的语法，开头、注释、变量和环境，虽然不涉及到具体的东西，但是大号基础是以后学习的前提，很多","link":"","raw":null,"photos":[],"categories":[{"name":"Shell","slug":"Shell","count":5,"path":"api/categories/Shell.json"}],"tags":[{"name":"Shell","slug":"Shell","count":5,"path":"api/tags/Shell.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}]},{"title":"Linux环境下 Vim的安装配置及使用","slug":"linux/vim-config","date":"2016-09-29T04:22:31.000Z","updated":"2017-12-17T17:36:05.000Z","comments":true,"path":"api/articles/linux/vim-config.json","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>Learn vim and it will be your last text editor. There isn’t any better text editor that I know of. It is hard to learn, but incredible to use.<br>学习VIM，它会是你最后的文本编辑器。没有任何好转的文本编辑器，我知道的。这是很难学，但令人难以置信的使用。</p>\n<p>VI是LINUX下最老牌的编辑工具，而VIM则是VI的升级版本，LINUX系统必备啊~~</p>","keywords":null,"cover":"http://img.blog.csdn.net/20160929104119636","content":null,"text":"前言Learn vim and it will be your last text editor. There isn’t any better text editor that I know of. It is hard to learn, but incredible to ","link":"","raw":null,"photos":[],"categories":[{"name":"Vim","slug":"Vim","count":1,"path":"api/categories/Vim.json"}],"tags":[{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"},{"name":"Vim","slug":"Vim","count":1,"path":"api/tags/Vim.json"}]},{"title":"Linux 常用的一些基本命令","slug":"linux/cmd","date":"2016-09-28T04:17:31.000Z","updated":"2017-12-17T16:06:53.000Z","comments":true,"path":"api/articles/linux/cmd.json","excerpt":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h4><p>Linux提供了大量的命令，利用它可以有效地完成大量的工作，如磁盘操作、文件存取、目录操作、进程管理、文件权限设定等。所以，在Linux系统上工作离不开使用系统提供的命令。要想真正理解Linux系统，就必须从Linux命令学起，通过基础的命令学习可以进一步理解Linux系统，<br>下面就来简单总结下常用的基础操作命令。</p>","keywords":null,"cover":null,"content":null,"text":"前言Linux提供了大量的命令，利用它可以有效地完成大量的工作，如磁盘操作、文件存取、目录操作、进程管理、文件权限设定等。所以，在Linux系统上工作离不开使用系统提供的命令。要想真正理解Linux系统，就必须从Linux命令学起，通过基础的命令学习可以进一步理解Linux系统，","link":"","raw":null,"photos":[],"categories":[{"name":"Linux","slug":"Linux","count":2,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}]},{"title":"NDK开发（一）JNI简介及调用流程","slug":"ndk/jni-1","date":"2016-09-23T07:28:31.000Z","updated":"2017-12-17T15:45:48.000Z","comments":true,"path":"api/articles/ndk/jni-1.json","excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h3><p>前段时间学习了C、C++的一些基础知识后，了解了它们的编码风格，要想掌握NDK开发，前提是会使用JNI，下面我们开始简单的介绍吧！</p>\n<h3 id=\"JNI简介\"><a href=\"#JNI简介\" class=\"headerlink\" title=\"JNI简介\"></a><strong>JNI简介</strong></h3><p>　　JNI全称是Java Native Interface（Java本地接口），本地接口就是指用C和C++开发的接口。从Java1.1开始，JNI标准成为java平台的一部分，它允许Java代码和其他语言写的代码进行交互。JNI一开始是为了本地已编译语言，尤其是C和C++而设计的，但是它并不妨碍你使用其他编程语言，只要调用约定受支持就可以了。<br>　　<br>","keywords":null,"cover":"http://img.blog.csdn.net/20160921002729113","content":null,"text":"前言前段时间学习了C、C++的一些基础知识后，了解了它们的编码风格，要想掌握NDK开发，前提是会使用JNI，下面我们开始简单的介绍吧！JNI简介　　JNI全称是Java Native Interface（Java本地接口），本地接口就是指用C和C++开发的接口。从Java1.1开","link":"","raw":null,"photos":[],"categories":[{"name":"NDK","slug":"NDK","count":5,"path":"api/categories/NDK.json"}],"tags":[{"name":"NDK","slug":"NDK","count":5,"path":"api/tags/NDK.json"},{"name":"JNI","slug":"JNI","count":5,"path":"api/tags/JNI.json"}]},{"title":"Xshell 远程连接Linux服务器","slug":"linux/xshell","date":"2016-09-20T10:30:31.000Z","updated":"2017-12-17T16:14:33.000Z","comments":true,"path":"api/articles/linux/xshell.json","excerpt":"<p>我这里有一台电脑，装的Ubuntu系统，当我想使用时，又要去使用另外一台机器（如果没有，可以直接去阿里云整一台主机），更何况文件传输也不方便，比较麻烦，后来，看着同事用的Xshell 远程连接linux，挺方便的就折腾了一番，当然，putty，xftp是个很不错的选择。</p>\n<p>xshell和xftp是windows下访问ubuntu（linux）服务器的一个非常好使的工具。</p>\n<h4 id=\"ubuntu安装ssh服务器\"><a href=\"#ubuntu安装ssh服务器\" class=\"headerlink\" title=\"ubuntu安装ssh服务器\"></a><strong>ubuntu安装ssh服务器</strong></h4><p>首先，判断Ubuntu是否安装了ssh服务：<br>1、输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">ps -e |grep ssh</span></span><br></pre></td></tr></table></figure>\n<p> 如果服务已经启动，则可以同时看到“ssh-agent”和“sshd”，否则表示没有安装服务，或没有开机启动 。<br>","keywords":null,"cover":"http://img.blog.csdn.net/20160919180446941","content":null,"text":"我这里有一台电脑，装的Ubuntu系统，当我想使用时，又要去使用另外一台机器（如果没有，可以直接去阿里云整一台主机），更何况文件传输也不方便，比较麻烦，后来，看着同事用的Xshell 远程连接linux，挺方便的就折腾了一番，当然，putty，xftp是个很不错的选择。xshel","link":"","raw":null,"photos":[],"categories":[{"name":"Linux","slug":"Linux","count":2,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"},{"name":"Xshell","slug":"Xshell","count":1,"path":"api/tags/Xshell.json"}]},{"title":"C++ New和delete操作符使用","slug":"cpp/string","date":"2016-09-12T06:28:31.000Z","updated":"2017-12-17T17:36:01.000Z","comments":true,"path":"api/articles/cpp/string.json","excerpt":"<p>在C语言中，动态分配内存用 malloc() 函数，释放内存用 free() 函数。如下所示：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *p = (<span class=\"keyword\">int</span>*) <span class=\"built_in\">malloc</span>( <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * <span class=\"number\">10</span> );  <span class=\"comment\">//分配10个int型的内存空间</span></span><br><span class=\"line\"><span class=\"built_in\">free</span>(p);  <span class=\"comment\">//释放内存</span></span><br></pre></td></tr></table></figure>\n<p>在C++中，这两个函数仍然可以使用，但是C++又新增了两个关键字，new 和 delete：new 用来动态分配内存，delete 用来释放内存。</p>","keywords":null,"cover":null,"content":null,"text":"在C语言中，动态分配内存用 malloc() 函数，释放内存用 free() 函数。如下所示：1<br>2<br>int *p = (int*) malloc( sizeof(int) * 10 );  //分配10个int型的内存空间<br>free(p);  //释放内存<b","link":"","raw":null,"photos":[],"categories":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/categories/C-C.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}]},{"title":"C++ String字符串的增删改查","slug":"cpp/aduc","date":"2016-09-11T09:50:45.000Z","updated":"2017-12-17T17:36:04.000Z","comments":true,"path":"api/articles/cpp/aduc.json","excerpt":"<p>c++ 提供的string类包含了若干实用的成员函数，大大方便了字符串的增加、删除、更改、查询等操作。</p>\n<h4 id=\"插入字符串\"><a href=\"#插入字符串\" class=\"headerlink\" title=\"插入字符串\"></a>插入字符串</h4><p>insert（）函数可以在string字符串中置顶的位置插入另一个字符串，它的原型为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span>&amp; <span class=\"title\">insert</span> <span class=\"params\">(<span class=\"keyword\">size_t</span> pos, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; str)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>看这个插入的格式我们就能猜想到，pos表示要插入的下标；str表示要插入的字符串，它可以是string变量，也可以是C风格的字符串。<br>","keywords":null,"cover":null,"content":null,"text":"c++ 提供的string类包含了若干实用的成员函数，大大方便了字符串的增加、删除、更改、查询等操作。插入字符串insert（）函数可以在string字符串中置顶的位置插入另一个字符串，它的原型为：1<br>string&amp; insert (size_t pos, cons","link":"","raw":null,"photos":[],"categories":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/categories/C-C.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}]},{"title":"C++ String类和字符串的访问和拼接操作","slug":"cpp/string","date":"2016-09-11T06:28:31.000Z","updated":"2017-12-17T17:36:05.000Z","comments":true,"path":"api/articles/cpp/string.json","excerpt":"<p>C++ 增强了对字符串的支持，除了可以使用c中的字符串，还可以使用内置的数据类型string，string类处理字符串会翻遍很多，完全可以代替C语言中的char 数组和char 指针。</p>\n<p>使用sting类需要包含头文件&lt; sting &gt;, 下面我们就来介绍怎么使用。</p>\n<p><strong>string 的几种用法：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s1;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s2 = <span class=\"string\">\"c plus plus\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s3 = s2;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s4</span><span class=\"params\">(<span class=\"number\">5</span>, <span class=\"string\">'s'</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; s1 &lt;&lt; s2 &lt;&lt; s3 &lt;&lt; s4 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c <span class=\"keyword\">plus</span> plusc <span class=\"keyword\">plus</span> plussssss</span><br><span class=\"line\">请按任意键继续. . .</span><br></pre></td></tr></table></figure>","keywords":null,"cover":null,"content":null,"text":"C++ 增强了对字符串的支持，除了可以使用c中的字符串，还可以使用内置的数据类型string，string类处理字符串会翻遍很多，完全可以代替C语言中的char 数组和char 指针。使用sting类需要包含头文件&lt; sting &gt;, 下面我们就来介绍怎么使用。str","link":"","raw":null,"photos":[],"categories":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/categories/C-C.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}]},{"title":"Android中签名、证书、公钥密钥的概念及使用","slug":"sign","date":"2016-09-02T09:08:06.000Z","updated":"2017-12-17T15:15:42.000Z","comments":true,"path":"api/articles/sign.json","excerpt":"<p>资料来源于Android 官方文档：<br><a href=\"https://developer.android.com/studio/publish/app-signing.html\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/studio/publish/app-signing.html</a><br>还有些资料来源于网络。加以整理！</p>\n<h2 id=\"公钥和私钥的概念\"><a href=\"#公钥和私钥的概念\" class=\"headerlink\" title=\"公钥和私钥的概念\"></a><strong>公钥和私钥的概念</strong></h2><p>在现代密码体制中加密和解密是采用不同的密钥（公开密钥），也就是公开密钥算法（也叫非对称算法、双钥算法）”，每个通信方均需要两个密钥，即公钥和私钥，这两把密钥可以互为加解密。公钥是公开的，不需要保密，而私钥是由个人自己持有，并且必须妥善保管和注意保密。<br>","keywords":null,"cover":"http://img.blog.csdn.net/20160902150733659","content":null,"text":"资料来源于Android 官方文档：<br>https://developer.android.com/studio/publish/app-signing.html<br>还有些资料来源于网络。加以整理！公钥和私钥的概念在现代密码体制中加密和解密是采用不同的密钥（公开密钥），也","link":"","raw":null,"photos":[],"categories":[{"name":"Android","slug":"Android","count":11,"path":"api/categories/Android.json"}],"tags":[{"name":"公钥","slug":"公钥","count":1,"path":"api/tags/公钥.json"},{"name":"私钥","slug":"私钥","count":1,"path":"api/tags/私钥.json"}]},{"title":"使用Gradle和Nexus 搭建私有Maven仓库","slug":"maven","date":"2016-08-30T13:21:06.000Z","updated":"2017-12-18T12:29:40.000Z","comments":true,"path":"api/articles/maven.json","excerpt":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a><strong>前言：</strong></h2><p>随着业务的增长，需求量增多，我们的App 组件也越来越多，几乎大部分组件都有用到同样的第三方库和公司内部封装的库，而团队中的所有人都重复的从maven 远程的中央仓库下载构建，这样就会加大了仓库的负载和浪费了外网的带宽，网速慢的话，就要等很久很久，半个小时，几个小时，都有可能！这样明显影响项目的开发进度，有的公司还是在内网的情况下开发，连接不到中央仓库怎么办？公司内部开发的公共组件怎么让其他项目共用呢？这个时候，我们不得不为自己的团队搭建一个私服maven仓库，来提高我们的开发效率。</p>\n<p>起初，对gradle和maven不是很熟，看了网上的教程一脸懵逼，后来，花了点时间，发现整个过程也还是很简单的。↓↓</p>\n<p>首先我们来了解一下，</p>\n<h2 id=\"一、什么是Maven-Gradle\"><a href=\"#一、什么是Maven-Gradle\" class=\"headerlink\" title=\"一、什么是Maven,Gradle?\"></a><strong>一、什么是Maven,Gradle?</strong></h2><p><strong>Maven</strong> 是一个项目管理和自动构建工具。Maven 包集中存放的地方，就是 Maven 仓库。这些仓库，可以是放在本地，也可以放在某个远程服务器上。 可以是私有仓库，也可以是公开的。下开发用的库列表：</p>\n<figure class=\"highlight puppet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mavenCentral();</span><br><span class=\"line\">jcenter()</span><br><span class=\"line\"><span class=\"keyword\">maven</span> &#123;</span><br><span class=\"line\">     url <span class=\"string\">'file:///Users/my-user-name/Documents/Android/repo/'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">maven</span> &#123;</span><br><span class=\"line\">    url <span class=\"string\">'http://localhost:8081/nexus/content/repositories/releases/'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","keywords":null,"cover":"http://img.blog.csdn.net/20160830184129972","content":null,"text":"前言：随着业务的增长，需求量增多，我们的App 组件也越来越多，几乎大部分组件都有用到同样的第三方库和公司内部封装的库，而团队中的所有人都重复的从maven 远程的中央仓库下载构建，这样就会加大了仓库的负载和浪费了外网的带宽，网速慢的话，就要等很久很久，半个小时，几个小时，都有可","link":"","raw":null,"photos":[],"categories":[{"name":"教程","slug":"教程","count":2,"path":"api/categories/教程.json"}],"tags":[{"name":"maven","slug":"maven","count":1,"path":"api/tags/maven.json"}]}]}