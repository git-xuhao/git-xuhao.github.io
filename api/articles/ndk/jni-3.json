{"title":"NDK开发（三）C访问Java属性和方法","slug":"ndk/jni-3","date":"2016-10-06T14:30:31.000Z","updated":"2017-12-17T15:46:07.000Z","comments":true,"path":"api/articles/ndk/jni-3.json","photos":[],"link":"","excerpt":"前言native方法虽然是native的，但毕竟是方法，那么就应该同其他方法一样，能够访问类的属性和方法。实际上，JNI的确可以做到这一点，我们通过几个例子来说明~","covers":["http://img.blog.csdn.net/20161006210123652","http://img.blog.csdn.net/20161006213959982","http://img.blog.csdn.net/20161006211824441"],"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>native方法虽然是native的，但毕竟是方法，那么就应该同其他方法一样，能够访问类的属性和方法。实际上，JNI的确可以做到这一点，我们通过几个例子来说明~</p>\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>继<a href=\"http://blog.csdn.net/u011974987/article/details/52743495\" target=\"_blank\" rel=\"noopener\"> Android NDK 开发（二）JNI 传递参数和返回值</a>之后。</p>\n<h3 id=\"1-访问类方法\"><a href=\"#1-访问类方法\" class=\"headerlink\" title=\"1.访问类方法\"></a><strong>1.访问类方法</strong></h3><p>初始化了Java虚拟机后，就可以开始调用Java的方法。要调用一个Java对象的方法必须经过几个步骤：</p>\n<h4 id=\"1-1获取指定对象的类定义（jclass）\"><a href=\"#1-1获取指定对象的类定义（jclass）\" class=\"headerlink\" title=\"1.1获取指定对象的类定义（jclass）\"></a><strong>1.1获取指定对象的类定义（jclass）</strong></h4><p>有两种方式来获取对象的类定义：<br>第一种是在已知类名的情况下使用FindClass来查找对应的类。但是要注意类名并不同于平时写的Java代码，例如要得到类jni.test.Demo的定义必须调用如下代码：</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jclass cls = (<span class=\"name\">*env</span>)-&gt;FindClass(<span class=\"name\">env</span>, <span class=\"string\">\"jni/test/Demo\"</span>)<span class=\"comment\">; //把点号换成斜杠</span></span><br></pre></td></tr></table></figure>\n<p>第二种是通过对象直接得到其所对应的类定义：</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jclass cls = (<span class=\"name\">*env</span>)-&gt; GetObjectClass(<span class=\"name\">env</span>, obj)<span class=\"comment\">; //其中obj是要引用的对象，类型是jobject</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"1-2读取要调用方法的定义\"><a href=\"#1-2读取要调用方法的定义\" class=\"headerlink\" title=\"1.2读取要调用方法的定义\"></a><strong>1.2读取要调用方法的定义</strong></h4><p>我们先来看看JNI中获取方法定义的函数：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">jmethodID </span>(<span class=\"keyword\">JNICALL </span>*GetMethodID)(<span class=\"keyword\">JNIEnv </span>*env, <span class=\"keyword\">jclass </span>clazz, const char *name,  </span><br><span class=\"line\">const char *sig)<span class=\"comment\">; </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">jmethodID </span>(<span class=\"keyword\">JNICALL </span>*GetStaticMethodID)(<span class=\"keyword\">JNIEnv </span>*env, <span class=\"keyword\">jclass </span>class, const char  </span><br><span class=\"line\">*name, const char *sig)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>这两个函数的区别明显都能猜到，GetStaticMethodID 是用来获取静态方法的定义，而GetMethodID 则是获取非静态的方法定义。</p>\n<p>这两个函数都需要提供四个参数：</p>\n<ul>\n<li>第一个参数env 就是初始化虚拟机得到的jni环境；</li>\n<li>第二个参数class 是对象的类定义，也就是第一步得到的obj；</li>\n<li>第三个参数是方法名称；</li>\n<li>第四个参数是最重要德，这个参数是方法的定义。</li>\n</ul>\n<p>因为我们知道Java中允许方法的多态，仅仅是通过方法名是没有办法定位到一个具体的方法，因此就需要第 四个参数来指定方法的具体定义（也就是所谓的签名）；但是怎么利用一个字符串来表示方法的具体定义呢？JDK中已经准备好一个反编译工具javap。</p>\n<p>通过这个工具就可以得到类 中每个属性、方法的定义。下面就来看看jni.test.Demo的定义：</p>\n<p>打开命令行窗口进入到项目目录德的bin目录下，并运行 javap -s -p jni.test.Demo 得到运行结果如下： </p>\n<p><img src=\"http://img.blog.csdn.net/20161006210123652\" alt=\"cmd签名\"></p>\n<p>从上图中，我们看到类中每个属性和方法下面都有一段注释。注释中不包含空格的内容就是第四个参数要填的内容。基本数据的签名如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20161006213959982\" alt=\"这里写图片描述\"></p>\n<p>下面这段代码将调用accessConstructor（）的方法。</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//访问构造方法</span></span><br><span class=\"line\"><span class=\"comment\">//使用java.util.Date产生一个当前的时间戳</span></span><br><span class=\"line\">JNIEXPORT jobject JNICALL Java_com_dongnaoedu_jni_JniTest_accessConstructor</span><br><span class=\"line\">(JNIEnv *<span class=\"keyword\">env</span>, jobject jobj)&#123;</span><br><span class=\"line\">\tjclass cls = (*<span class=\"keyword\">env</span>)-&gt;FindClass(<span class=\"keyword\">env</span>, <span class=\"string\">\"java/util/Date\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//jmethodID</span></span><br><span class=\"line\">\tjmethodID constructor_mid = (*<span class=\"keyword\">env</span>)-&gt;GetMethodID(<span class=\"keyword\">env</span>, cls, <span class=\"string\">\"&lt;init&gt;\"</span>, <span class=\"string\">\"()V\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//实例化一个Date对象</span></span><br><span class=\"line\">\tjobject date_obj = (*<span class=\"keyword\">env</span>)-&gt;NewObject(<span class=\"keyword\">env</span>, cls, constructor_mid);</span><br><span class=\"line\">\t<span class=\"comment\">//调用getTime方法</span></span><br><span class=\"line\">\tjmethodID mid = (*<span class=\"keyword\">env</span>)-&gt;GetMethodID(<span class=\"keyword\">env</span>, cls, <span class=\"string\">\"getTime\"</span>, <span class=\"string\">\"()J\"</span>);</span><br><span class=\"line\">\tjlong time = (*<span class=\"keyword\">env</span>)-&gt;CallLongMethod(<span class=\"keyword\">env</span>, date_obj, mid);</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintf(<span class=\"string\">\"\\ntime:%lld\\n\"</span>,time);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> date_obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在java 端调用</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t.accessConstructor()<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img src=\"http://img.blog.csdn.net/20161006211824441\" alt=\"这里写图片描述\"></p>\n<hr>\n<h4 id=\"1-3-调用方法\"><a href=\"#1-3-调用方法\" class=\"headerlink\" title=\"1.3 调用方法\"></a><strong>1.3 调用方法</strong></h4><p>为了调用对象的某个方法，可以使用函数</p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Call&lt;<span class=\"keyword\">TYPE</span>&gt;<span class=\"function\"><span class=\"keyword\">Method</span>或者 <span class=\"title\">CallStatic</span>&lt;<span class=\"title\">TYPE</span>&gt;<span class=\"title\">Method</span>（访问类的静态方法），</span></span><br></pre></td></tr></table></figure>\n<p>&lt; TYPE&gt;根据不同的返回类型而定。这些方法都是使用可 变参数的定义，如果访问某个方法需要参数时，只需要把所有参数按照顺序填写到方法中就可以。在讲到构造函数的访问时，将演示如何访问带参数的构造函数。</p>\n<hr>\n<h3 id=\"2-访问类属性\"><a href=\"#2-访问类属性\" class=\"headerlink\" title=\"2.访问类属性\"></a><strong>2.访问类属性</strong></h3><h4 id=\"2-1-获取指定对象的类（jclass）\"><a href=\"#2-1-获取指定对象的类（jclass）\" class=\"headerlink\" title=\"2.1 获取指定对象的类（jclass）\"></a><strong>2.1 获取指定对象的类（jclass）</strong></h4><p> 这一步，与访问类方法完全一样，具体就参考上面德步骤吧~</p>\n<hr>\n<h4 id=\"2-2-读取类属性的定义（jfieldID）\"><a href=\"#2-2-读取类属性的定义（jfieldID）\" class=\"headerlink\" title=\"2.2 读取类属性的定义（jfieldID）\"></a><strong>2.2 读取类属性的定义（jfieldID）</strong></h4><p>在JNI中是这样定义获取类属性的方法的：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">jfieldID </span>(<span class=\"keyword\">JNICALL </span>*GetFieldID)</span><br><span class=\"line\">(<span class=\"keyword\">JNIEnv </span>*env, <span class=\"keyword\">jclass </span>clazz, const char *name, const char *sig)<span class=\"comment\">; </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">jfieldID </span>(<span class=\"keyword\">JNICALL </span>*GetStaticFieldID) </span><br><span class=\"line\">(<span class=\"keyword\">JNIEnv </span>*env, <span class=\"keyword\">jclass </span>clazz, const char *name, const char *sig)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>这两个函数中第一个参数为JNI环境；clazz为类的定义；name为属性名称；第四个参数同样是为了表达属性的类型。前面我们使用javap工具获取类的详细定义的时候有这样两行： </p>\n<p>public java.lang.String key;<br>/<em>   Ljava/lang/String;   </em>/ </p>\n<p>其中第二行注释的内容就是第四个参数要填的信息，这跟访问类方法时是相同的。</p>\n<hr>\n<h4 id=\"2-3-读取和设置属性值\"><a href=\"#2-3-读取和设置属性值\" class=\"headerlink\" title=\"2.3 读取和设置属性值\"></a><strong>2.3 读取和设置属性值</strong></h4><p>有了属性的定义要访问属性值就很容易了。有几个方法用来读取和设置类的属性，它们是：<code>Get&lt;TYPE&gt;Field、 Set&lt;TYPE&gt;Field、GetStatic&lt;TYPE&gt;Field、 SetStatic&lt;TYPE&gt;Field。</code><br>比如读取Demo类的key属性就可以用GetFieldID，相关代码如下： </p>\n<p>java调用代码：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//属性</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">String</span> <span class=\"built_in\">key</span> = <span class=\"string\">\"xuhao\"</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//访问属性，返回修改之后的属性内容</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">String</span> accessField();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</span><br><span class=\"line\">    JniTest t = <span class=\"keyword\">new</span> JniTest();</span><br><span class=\"line\">\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"key修改前：\"</span>+t.<span class=\"built_in\">key</span>);</span><br><span class=\"line\">\tt.accessField();</span><br><span class=\"line\">\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"key修改后：\"</span>+t.<span class=\"built_in\">key</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>本地方法实现：</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//C/C++访问Java的成员</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.访问属性</span></span><br><span class=\"line\"><span class=\"comment\">//修改属性key</span></span><br><span class=\"line\">JNIEXPORT jstring JNICALL Java_com_dongnaoedu_jni_JniTest_accessField</span><br><span class=\"line\">(JNIEnv *<span class=\"keyword\">env</span>, jobject jobj)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//jobj是t对象，JniTest.class</span></span><br><span class=\"line\">\tjclass cls = (*<span class=\"keyword\">env</span>)-&gt;GetObjectClass(<span class=\"keyword\">env</span>, jobj);</span><br><span class=\"line\">\t<span class=\"comment\">//jfieldID</span></span><br><span class=\"line\">\t<span class=\"comment\">//属性名称，属性签名</span></span><br><span class=\"line\">\tjfieldID fid = (*<span class=\"keyword\">env</span>)-&gt;GetFieldID(<span class=\"keyword\">env</span>, cls, <span class=\"string\">\"key\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//xuhao &gt;&gt; super xuhao</span></span><br><span class=\"line\">\t<span class=\"comment\">//获取key属性的值</span></span><br><span class=\"line\">\t<span class=\"comment\">//Get&lt;Type&gt;Field</span></span><br><span class=\"line\">\tjstring jstr = (*<span class=\"keyword\">env</span>)-&gt;GetObjectField(<span class=\"keyword\">env</span>, jobj, fid);\t</span><br><span class=\"line\">\tprintf(<span class=\"string\">\"jstr:%#x\\n\"</span>,&amp;jstr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//jstring -&gt; c字符串</span></span><br><span class=\"line\">\t<span class=\"comment\">//isCopy 是否复制（true代表赋值，false不复制）</span></span><br><span class=\"line\">\tchar *c_str = (*<span class=\"keyword\">env</span>)-&gt;GetStringUTFChars(<span class=\"keyword\">env</span>,jstr,JNI_FALSE);</span><br><span class=\"line\">\t<span class=\"comment\">//拼接得到新的字符串</span></span><br><span class=\"line\">\tchar <span class=\"keyword\">text</span>[<span class=\"number\">20</span>] = <span class=\"string\">\"super \"</span>;</span><br><span class=\"line\">\tstrcat(<span class=\"keyword\">text</span>,c_str);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//c字符串 -&gt;jstring</span></span><br><span class=\"line\">\tjstring new_jstr = (*<span class=\"keyword\">env</span>)-&gt;NewStringUTF(<span class=\"keyword\">env</span>, <span class=\"keyword\">text</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//修改key</span></span><br><span class=\"line\">\t<span class=\"comment\">//Set&lt;Type&gt;Field</span></span><br><span class=\"line\">\t(*<span class=\"keyword\">env</span>)-&gt;SetObjectField(<span class=\"keyword\">env</span>, jobj, fid, new_jstr);</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintf(<span class=\"string\">\"new_jstr:%#x\\n\"</span>, &amp;new_jstr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> new_jstr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后调用结果如下：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">key</span>修改前：xuhao</span><br><span class=\"line\"><span class=\"built_in\">key</span>修改后：<span class=\"keyword\">super</span> xuhao</span><br></pre></td></tr></table></figure>\n<p>其他的访问方式都是按照这些套路来的，理解就可以了，今天连续赶了两篇博客，后面再抽出时间继续，坚持，坚持，再坚持！！！</p>\n<hr>\n<blockquote>\n<p>本文由博主辛苦整理下来的笔记；<br>希望大家能够指点或提出宝贵意见，共同学习，谢谢！ </p>\n</blockquote>\n","categories":[{"name":"NDK","slug":"NDK","count":5,"path":"api/categories/NDK.json"}],"tags":[{"name":"NDK","slug":"NDK","count":5,"path":"api/tags/NDK.json"},{"name":"JNI","slug":"JNI","count":5,"path":"api/tags/JNI.json"}]}