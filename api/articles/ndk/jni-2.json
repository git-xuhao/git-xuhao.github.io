{"title":"NDK开发（二）JNI传递参数和返回值","slug":"ndk/jni-2","date":"2016-10-06T07:28:31.000Z","updated":"2017-12-17T15:47:06.000Z","comments":true,"path":"api/articles/ndk/jni-2.json","photos":[],"link":"","excerpt":"前言我们在使用 JNI 时最常问到的是 JAVA 和 C/C++之间如何传递数据，以及数据类型之间如何 互相映射。我们从整数等基本类型和数组、字符串等普通的对象类型开始讲述。至于如何传递任意对象，将在后面会更新。<br>","covers":["http://img.blog.csdn.net/20161006145447006","http://img.blog.csdn.net/20161006153213851"],"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们在使用 JNI 时最常问到的是 JAVA 和 C/C++之间如何传递数据，以及数据类型之间如何 互相映射。我们从整数等基本类型和数组、字符串等普通的对象类型开始讲述。至于如何传递任意对象，将在后面会更新。<br><a id=\"more\"></a></p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>继<a href=\"http://blog.csdn.net/u011974987/article/details/52602913\" target=\"_blank\" rel=\"noopener\">JNI简介及调用流程</a>这篇文章，我们再来实现一个非静态的native方法。</p>\n<p>Java端：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class JniTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//静态的</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> getStringFromC();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//非静态的</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">String</span> getString2FromC(<span class=\"built_in\">int</span> i);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">String</span> <span class=\"built_in\">text</span> = getStringFromC();</span><br><span class=\"line\">\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"built_in\">text</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tJniTest t = <span class=\"keyword\">new</span> JniTest();</span><br><span class=\"line\">\t\t<span class=\"built_in\">text</span> = t.getString2FromC(<span class=\"number\">6</span>);</span><br><span class=\"line\">\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"built_in\">text</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//加载动态库</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span>&#123;\t</span><br><span class=\"line\">\t\tSystem.loadLibrary(<span class=\"string\">\"jni_study\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<!-- more -->\n<p>在native层实现 getString2FromC 非静态方法；</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">JNIEXPORT </span><span class=\"keyword\">jstring </span><span class=\"keyword\">JNICALL </span><span class=\"keyword\">Java_com_study_jni_JniTest_getString2FromC</span></span><br><span class=\"line\"><span class=\"keyword\">(JNIEnv </span>*env, <span class=\"keyword\">jobject </span><span class=\"keyword\">jobj, </span><span class=\"keyword\">jint </span>num)&#123;</span><br><span class=\"line\">\treturn (*env)-&gt;NewStringUTF(env,<span class=\"string\">\"C String2\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由此看出，每个native函数，都至少有两个参数（JNIEnv*,jclass或者jobject)</p>\n<ul>\n<li><strong>当native方法为静态方法时：</strong><br>jclass 代表native方法所属类的class对象(JniTest.class)</li>\n<li><strong>当native方法为非静态方法时：</strong><br>jobject 代表native方法所属的对象</li>\n</ul>\n<hr>\n<h3 id=\"1-Java基本数据类型传递\"><a href=\"#1-Java基本数据类型传递\" class=\"headerlink\" title=\"1.Java基本数据类型传递\"></a><strong>1.Java基本数据类型传递</strong></h3><p>用过Java的人都知道，Java中的基本类型包括boolean，byte，char，short，int，long，float，double这样几种，如果你用这几种类型做native方法的参数，当你通过javah -jni生成.h文件的时候，只要看一下生成的.h文件，就会一清二楚，这些类型分别对应的类型是jboolean，jbyte，jchar，jshort，jint，jlong，jfloat，jdouble 。这几种类型几乎都可以当成对应的C++类型来用。</p>\n<p>Java基本数据类型与JNI数据类型的映射关系如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20161006145447006\" alt=\"JNI的基本数据类型\"></p>\n<p>对应的java引用数据类型：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct _jobject<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct _jobject *<span class=\"keyword\">jobject;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef </span><span class=\"keyword\">jobject </span><span class=\"keyword\">jclass;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef </span><span class=\"keyword\">jobject </span><span class=\"keyword\">jthrowable;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef </span><span class=\"keyword\">jobject </span><span class=\"keyword\">jstring;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef </span><span class=\"keyword\">jobject </span><span class=\"keyword\">jarray;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef </span><span class=\"keyword\">jarray </span><span class=\"keyword\">jbooleanArray;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef </span><span class=\"keyword\">jarray </span><span class=\"keyword\">jbyteArray;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef </span><span class=\"keyword\">jarray </span><span class=\"keyword\">jcharArray;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef </span><span class=\"keyword\">jarray </span><span class=\"keyword\">jshortArray;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef </span><span class=\"keyword\">jarray </span><span class=\"keyword\">jintArray;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef </span><span class=\"keyword\">jarray </span><span class=\"keyword\">jlongArray;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef </span><span class=\"keyword\">jarray </span><span class=\"keyword\">jfloatArray;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef </span><span class=\"keyword\">jarray </span><span class=\"keyword\">jdoubleArray;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef </span><span class=\"keyword\">jarray </span><span class=\"keyword\">jobjectArray;</span></span><br></pre></td></tr></table></figure>\n<p>关系图：</p>\n<p><img src=\"http://img.blog.csdn.net/20161006153213851\" alt=\"这里写图片描述\"></p>\n<p>最终都是jobject 的结构体指针类型。</p>\n<hr>\n<h3 id=\"2-String参数的传递\"><a href=\"#2-String参数的传递\" class=\"headerlink\" title=\"2.String参数的传递\"></a><strong>2.String参数的传递</strong></h3><p>Java的String和C++的string是不能对等起来的，所以处理起来比较麻烦。先看一个例子</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prompt</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// native method that prints a prompt and reads a line</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> native <span class=\"keyword\">String</span> getLine(<span class=\"keyword\">String</span> prompt);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void main(<span class=\"keyword\">String</span> args[]) &#123;</span><br><span class=\"line\">Prompt p = <span class=\"keyword\">new</span> <span class=\"type\">Prompt</span>();</span><br><span class=\"line\"><span class=\"keyword\">String</span> input = p.getLine(<span class=\"string\">\"Type a line: \"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"User typed: \"</span> + input);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">System.loadLibrary(<span class=\"string\">\"Prompt\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，我们要实现一个native方法，String getLine(String prompt);读入一个String参数，返回一个String值。通过执行javah -jni得到的头文件是这样的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;jni.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _Included_Prompt</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _Included_Prompt</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_Prompt_getLine</span><span class=\"params\">(JNIEnv *env, jobject <span class=\"keyword\">this</span>, jstring prompt)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>jstring是JNI中对应于String的类型，但是和基本类型不同的是，jstring不能直接当作C++的string用。如果你用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; prompt &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>编译器肯定会扔给你一个错误信息的。<br>其实要处理jstring有很多种方式，这里只讲一种我认为最简单的方式，看下面这个例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Prompt.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_Prompt_getLine</span><span class=\"params\">(JNIEnv *env, jobject obj, jstring prompt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* str;</span><br><span class=\"line\">str = env-&gt;GetStringUTFChars(prompt, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(str == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//释放资源</span></span><br><span class=\"line\">env-&gt;ReleaseStringUTFChars(prompt, str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个字符串</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>* tmpstr = <span class=\"string\">\"return string succeeded\"</span>;</span><br><span class=\"line\">jstring rtstr = env-&gt;NewStringUTF(tmpstr);</span><br><span class=\"line\"><span class=\"keyword\">return</span> rtstr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的列子代码中，作为参数的prompt不能直接被C++程序使用，先做了如下转换</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">str</span> = env-&gt;GetStringUTFChars(prompt, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>将jstring类型变成一个char*类型。<br>返回的时候，要生成一个jstring类型的对象，也必须通过如下方式，</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">jstring rtstr</span> = env-&gt;NewStringUTF(tmpstr);</span><br></pre></td></tr></table></figure>\n<p>这里用到的<strong>GetStringUTFChars</strong>和<strong>NewStringUTF</strong>都是JNI提供的处理String类型的函数。</p>\n<hr>\n<h3 id=\"3-数组类型的传递\"><a href=\"#3-数组类型的传递\" class=\"headerlink\" title=\"3.数组类型的传递\"></a><strong>3.数组类型的传递</strong></h3><p>和String一样，JNI为Java基本类型的数组提供了j*Array类型，比如int[]对应的就是jintArray。来看一个传递int数组的例子。</p>\n<p>java端主要代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> native <span class=\"keyword\">void</span> <span class=\"title\">giveArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] <span class=\"built_in\">array</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] <span class=\"built_in\">array</span> = &#123;<span class=\"number\">9</span>,<span class=\"number\">100</span>,<span class=\"number\">10</span>,<span class=\"number\">37</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//排序</span></span><br><span class=\"line\">t.giveArray(<span class=\"built_in\">array</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : <span class=\"built_in\">array</span>) &#123;</span><br><span class=\"line\">\tSystem.out.println(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>C实现主要代码：<br><figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> compare(<span class=\"keyword\">int</span> *a,<span class=\"keyword\">int</span> *b)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (*a) - (*b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//传入</span></span><br><span class=\"line\">JNIEXPORT void JNICALL Java_com_study_jni_JniTest_giveArray</span><br><span class=\"line\">(JNIEnv *<span class=\"keyword\">env</span>, jobject jobj, jintArray arr)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//jintArray -&gt; jint指针 -&gt; c int 数组</span></span><br><span class=\"line\">\tjint *elems = (*<span class=\"keyword\">env</span>)-&gt;GetIntArrayElements(<span class=\"keyword\">env</span>, arr, NULL);</span><br><span class=\"line\">\t<span class=\"comment\">//printf(\"%#x,%#x\\n\", &amp;elems, &amp;arr);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//数组的长度</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = (*<span class=\"keyword\">env</span>)-&gt;GetArrayLength(<span class=\"keyword\">env</span>, arr);</span><br><span class=\"line\">\t<span class=\"comment\">//排序</span></span><br><span class=\"line\">\tqsort(elems, len, sizeof(jint), compare);\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//同步</span></span><br><span class=\"line\">\t<span class=\"comment\">//mode</span></span><br><span class=\"line\">\t<span class=\"comment\">//0, Java数组进行更新，并且释放C/C++数组</span></span><br><span class=\"line\">\t<span class=\"comment\">//JNI_ABORT, Java数组不进行更新，但是释放C/C++数组</span></span><br><span class=\"line\">\t<span class=\"comment\">//JNI_COMMIT，Java数组进行更新，不释放C/C++数组（函数执行完，数组还是会释放）</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t(*<span class=\"keyword\">env</span>)-&gt;ReleaseIntArrayElements(<span class=\"keyword\">env</span>, arr, elems, JNI_COMMIT);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个代码中的<strong>GetIntArrayElements</strong>和<strong>ReleaseIntArrayElements</strong>函数就是JNI提供用于处理int数组的函数。</p>\n<p>如果用arr[i]的方式去访问jintArray类型，不用问肯定会出错。<br>JNI还提供了另一对函数<strong>GetIntArrayRegion</strong>和<strong>ReleaseIntArrayRegion</strong>访问int数组，不在这里做介绍，至于其他的类型数组，方法类似。</p>\n<hr>\n<h3 id=\"4-返回数组\"><a href=\"#4-返回数组\" class=\"headerlink\" title=\"4.返回数组\"></a><strong>4.返回数组</strong></h3><p>在JNI中，二维数组和String数组都被视为object数组，因为数组和String被视为object。最后一个示例说明如何在本地代码中创建一个字符串数组并将它返回给 Java 调用者。</p>\n<p>java端的代码：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] array2 = t.getArray(<span class=\"number\">10</span>);</span><br><span class=\"line\">System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"------------\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i : array2) &#123;</span><br><span class=\"line\">\tSystem.out.<span class=\"built_in\">println</span>(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数实现：<br><figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回数组</span></span><br><span class=\"line\">JNIEXPORT jintArray JNICALL Java_com_study_jni_JniTest_getArray(JNIEnv *<span class=\"keyword\">env</span>, jobject jobj, jint len)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//创建一个指定大小的数组</span></span><br><span class=\"line\">\tjintArray jint_arr = (*<span class=\"keyword\">env</span>)-&gt;NewIntArray(<span class=\"keyword\">env</span>, len);</span><br><span class=\"line\">\tjint *elems = (*<span class=\"keyword\">env</span>)-&gt;GetIntArrayElements(<span class=\"keyword\">env</span>, jint_arr, NULL);\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; i &lt; len; i++)&#123;</span><br><span class=\"line\">\t\telems[i] = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//同步</span></span><br><span class=\"line\">\t(*<span class=\"keyword\">env</span>)-&gt;ReleaseIntArrayElements(<span class=\"keyword\">env</span>, jint_arr, elems, <span class=\"number\">0</span>);\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> jint_arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>jintArray jint_arr ;因为要返回值，所以需要创建一个指定大小jintArray对象。根据jintArray对象拿到jint 指针。然后，赋值，同步，这样通过参数返回就可以了。<br>下一篇将会介绍C 访问Java 属性和方法。</p>\n<blockquote>\n<p>本文由博主辛苦整理下来的笔记；<br>希望大家能够指点或提出宝贵意见，共同学习，谢谢！ </p>\n</blockquote>\n","categories":[{"name":"NDK","slug":"NDK","count":5,"path":"api/categories/NDK.json"}],"tags":[{"name":"NDK","slug":"NDK","count":5,"path":"api/tags/NDK.json"},{"name":"JNI","slug":"JNI","count":5,"path":"api/tags/JNI.json"}]}