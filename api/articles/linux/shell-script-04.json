{"title":"Shell 输入/输出重定向（四）","slug":"linux/shell-script-04","date":"2016-10-01T04:23:31.000Z","updated":"2017-12-17T16:07:59.000Z","comments":true,"path":"api/articles/linux/shell-script-04.json","photos":[],"link":"","excerpt":"前言原本计划国庆节第一天假期休息一天，但是想想自己还有很多事情没有完成，就立马打开电脑，开始干活了。打算这7天的假期好好整理下之前学的知识和巩固练习，充实每一天，好了入正题，Linux shell脚本基础前面我们在介绍Linux shell脚本的控制流程时，还有一部分内容没讲就是有关here document的内容这里继续，Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。原文链接请标明：<br>http://xuhaoblog.com/linux/shell-script-04.html<br>本文出自:【stromxu的博客】","covers":["http://img.blog.csdn.net/20161001150059408"],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p><font size=\"4\">原本计划国庆节第一天假期休息一天，但是想想自己还有很多事情没有完成，就立马打开电脑，开始干活了。打算这7天的假期好好整理下之前学的知识和巩固练习，充实每一天，好了入正题，Linux shell脚本基础前面我们在介绍Linux shell脚本的控制流程时，还有一部分内容没讲就是有关here document的内容这里继续，Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。</font></p>\n<p>原文链接请标明：<br><a href=\"http://xuhaoblog.com/linux/shell-script-04.html\">http://xuhaoblog.com/linux/shell-script-04.html</a><br>本文出自:【<a href=\"http://xuhaoblog.com\">stromxu</a>的博客】</p>\n<a id=\"more\"></a>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p><a href=\"http://xuhaoblog.com/2016/09/30/linux/shell-script-03.html\">接着上一篇继续…</a></p>\n<h4 id=\"1、Shell-输入-输出重定向\"><a href=\"#1、Shell-输入-输出重定向\" class=\"headerlink\" title=\"1、Shell 输入/输出重定向\"></a><strong>1、Shell 输入/输出重定向</strong></h4><h5 id=\"重定向命令列表如下：\"><a href=\"#重定向命令列表如下：\" class=\"headerlink\" title=\"重定向命令列表如下：\"></a>重定向命令列表如下：</h5><table>\n<thead>\n<tr>\n<th>命令</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command &gt; file</td>\n<td style=\"text-align:left\">将输出重定向到 file。</td>\n</tr>\n<tr>\n<td>command &lt; file</td>\n<td style=\"text-align:left\">将输入重定向到 file。</td>\n</tr>\n<tr>\n<td>command &gt;&gt; file</td>\n<td style=\"text-align:left\">将输出以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td>n &gt; file</td>\n<td style=\"text-align:left\">将文件描述符为 n 的文件重定向到 file。</td>\n</tr>\n<tr>\n<td>n &gt;&gt; file</td>\n<td style=\"text-align:left\">将文件描述符为 n 的文件以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td>n &gt;&amp; m</td>\n<td style=\"text-align:left\">将输出文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td>n &lt;&amp; m</td>\n<td style=\"text-align:left\">将输入文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td>&lt;&lt; tag</td>\n<td style=\"text-align:left\">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><font color=\"red\"> <strong>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</strong></font></li>\n</ul>\n<hr>\n<h5 id=\"1-1、输出重定向\"><a href=\"#1-1、输出重定向\" class=\"headerlink\" title=\"1.1、输出重定向\"></a><strong>1.1、输出重定向</strong></h5><p>重定向一般通过在命令间插入特定的符号来实现，语法如下：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comma<span class=\"symbol\">nd1</span> &gt; file<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>上面这个命令执行command1然后将输出的内容存入file1。</p>\n<p>注意任何file1内的已经存在的内容将被新内容替代。如果要将新的内容添加到文件的末尾，则使用&gt;&gt;操作符。</p>\n<p><strong>例子</strong>：</p>\n<p>我们先新建一个文件test2，然后执行 ls -al 重定向到test2文件中，在命令行的操作符代码如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">新建test2文件</span></span><br><span class=\"line\">touch test2    </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">输出重定向</span></span><br><span class=\"line\">ls -al &gt; test2</span><br></pre></td></tr></table></figure>\n<p>然后我们使用cat命令查看文件内容：</p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@iZ28t5k4ny4Z:/usr/xiho/shell<span class=\"comment\"># cat test3</span></span><br><span class=\"line\">total 132</span><br><span class=\"line\">drwxr-xr-x<span class=\"number\"> 2 </span>root root <span class=\"number\"> 4096 </span>Oct <span class=\"number\"> 1 </span>13:19 .</span><br><span class=\"line\">drwxr-xr-x<span class=\"number\"> 4 </span>root root <span class=\"number\"> 4096 </span>Sep<span class=\"number\"> 27 </span>16:29 ..</span><br><span class=\"line\">-rw-r--r--<span class=\"number\"> 1 </span>root root<span class=\"number\"> 12288 </span>Sep<span class=\"number\"> 27 </span>19:15 .01.sh.swo</span><br><span class=\"line\">-rw-r--r--<span class=\"number\"> 1 </span>root root<span class=\"number\"> 12288 </span>Sep<span class=\"number\"> 27 </span>16:35 .01.sh.swp</span><br><span class=\"line\">-rwxr--r--<span class=\"number\"> 1 </span>root root  <span class=\"number\"> 347 </span>Sep<span class=\"number\"> 28 </span>21:07 02.sh</span><br><span class=\"line\">-rwxr--r--<span class=\"number\"> 1 </span>root root  <span class=\"number\"> 100 </span>Sep<span class=\"number\"> 28 </span>21:28 03.sh</span><br><span class=\"line\">-rw-r--r--<span class=\"number\"> 1 </span>root root<span class=\"number\"> 12288 </span>Sep<span class=\"number\"> 28 </span>21:15 .03.sh.swp</span><br><span class=\"line\">-rwxr--r--<span class=\"number\"> 1 </span>root root  <span class=\"number\"> 109 </span>Sep<span class=\"number\"> 28 </span>22:17 04.sh</span><br><span class=\"line\">-rw-------<span class=\"number\"> 1 </span>root root<span class=\"number\"> 12288 </span>Sep<span class=\"number\"> 30 </span>18:03 .04.swp</span><br><span class=\"line\">-rw-r--r--<span class=\"number\"> 1 </span>root root    <span class=\"number\"> 0 </span>Sep<span class=\"number\"> 28 </span>22:45 05.sh</span><br><span class=\"line\">-rw-r--r--<span class=\"number\"> 1 </span>root root<span class=\"number\"> 12288 </span>Sep<span class=\"number\"> 28 </span>22:47 .05.sh.swp</span><br><span class=\"line\">-rw-r--r--<span class=\"number\"> 1 </span>root root    <span class=\"number\"> 0 </span>Sep<span class=\"number\"> 30 </span>20:57 06.sh</span><br><span class=\"line\">-rw-r--r--<span class=\"number\"> 1 </span>root root<span class=\"number\"> 12288 </span>Sep<span class=\"number\"> 30 </span>21:00 .06.sh.swp</span><br><span class=\"line\">-rwxrwxrwx<span class=\"number\"> 1 </span>root root  <span class=\"number\"> 223 </span>Sep<span class=\"number\"> 30 </span>17:50 b.sh</span><br><span class=\"line\">-rw-r--r--<span class=\"number\"> 1 </span>root root<span class=\"number\"> 12288 </span>Sep<span class=\"number\"> 30 </span>18:03 .b.sh.swo</span><br><span class=\"line\">-rw-r--r--<span class=\"number\"> 1 </span>root root<span class=\"number\"> 12288 </span>Sep<span class=\"number\"> 28 </span>16:50 .b.sh.swp</span><br><span class=\"line\">-rwxrwxrwx<span class=\"number\"> 1 </span>root root  <span class=\"number\"> 119 </span>Oct <span class=\"number\"> 1 </span>13:12 demo.sh</span><br><span class=\"line\">-rwxr--r--<span class=\"number\"> 1 </span>root root   <span class=\"number\"> 68 </span>Sep<span class=\"number\"> 30 </span>14:09 test1.sh</span><br><span class=\"line\">-rw-r--r--<span class=\"number\"> 1 </span>root root  <span class=\"number\"> 954 </span>Oct <span class=\"number\"> 1 </span>13:10 test2</span><br><span class=\"line\">-rw-r--r--<span class=\"number\"> 1 </span>root root    <span class=\"number\"> 0 </span>Oct <span class=\"number\"> 1 </span>13:19 test3</span><br></pre></td></tr></table></figure>\n<p>就会把当前目录下的所有文件给显示出来了。</p>\n<p>如果不希望文件内容被覆盖，可以使用 &gt;&gt; 追加到文件末尾，这个请自行练习使用。</p>\n<hr>\n<h5 id=\"1-2、输入重定向\"><a href=\"#1-2、输入重定向\" class=\"headerlink\" title=\"1.2、输入重定向\"></a><strong>1.2、输入重定向</strong></h5><p>和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comma<span class=\"symbol\">nd1</span> &lt; file<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>这样，本来需要从键盘获取输入的命令会转移到文件读取内容。注意：输出重定向是大于号（&gt;），出入重定向是小于号（&lt;）。</p>\n<p><strong>例子</strong></p>\n<p>接着上面的例子，我们统计test2文件的行数，(不熟悉命令的同学，请查看我的 <a href=\"http://blog.csdn.net/u011974987/article/details/52703177\" target=\"_blank\" rel=\"noopener\">shell命令（二）</a>的文章），执行以下命令：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wc -l test2</span><br><span class=\"line\"><span class=\"number\">21</span> test2</span><br></pre></td></tr></table></figure>\n<p>也可以将输入重定向到test2文件中：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wc -l &lt; test2</span><br><span class=\"line\"><span class=\"number\">21</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>上面两个例子的结果不同；第一个例子，会输出文件名；第二不会，因为它仅仅知道从标准输入读取内容。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command1 &lt; <span class=\"keyword\">infile</span> &gt; <span class=\"keyword\">outfile</span></span><br></pre></td></tr></table></figure>\n<p>同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。</p>\n<hr>\n<h5 id=\"1-3、重定向深入理解\"><a href=\"#1-3、重定向深入理解\" class=\"headerlink\" title=\"1.3、重定向深入理解\"></a><strong>1.3、重定向深入理解</strong></h5><p>一般情况下，每一个Linux 命令运行时都会打开三个文件：</p>\n<ul>\n<li>标准输入文件（stdin）: stdin的文件描述符为0，linux程序默认从stdin读取数据。</li>\n<li>标准输出文件（stdout）: stdout 的文件描述为1，linux程序默认想stdout输出数据。</li>\n<li>标准错误文件（stderr）: stderr 的文件描述符为2，linux程序会想stderr流中写入错误信息。</li>\n</ul>\n<hr>\n<p> 以后打开文件后。新增文件绑定描述符 可以依次增加。 一条shell命令执行，都会继承父进程的文件描述符。因此，所有运行的shell命令，都会有默认3个文件描述符。 </p>\n<p>正常情况下，command &gt; file 将stdout重定向file，command &lt; file 将stdin 重定向到 file。</p>\n<p>一个命令执行了：<br>先有一个输入：输入可以从键盘，也可以从文件得到<br>命令执行完成：成功了，会把成功结果输出到屏幕：standard output默认是屏幕<br>命令执行有错误：会把错误也输出到屏幕上面：standard error默认也是指的屏幕</p>\n<p>如果希望stderr 重定向 到file 可以这样写：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">command</span> <span class=\"title\">2</span>&gt; <span class=\"title\">file</span></span><br></pre></td></tr></table></figure>\n<p>如果希望stderr追加到file 文件末尾，可以这样写：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command <span class=\"number\">2</span><span class=\"meta\">&gt;&gt; </span>file</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>实例（通俗易懂）</strong></li>\n</ul>\n<p>显示当前目录文件，写一个实际存在和一个不存在的，方便理解。比如当前目录存在test1.sh，不存在xiho。代码如下：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root<span class=\"variable\">@iZ28t5k4ny4Z</span><span class=\"symbol\">:/usr/xiho/shell</span><span class=\"comment\"># ls test1.sh xiho </span></span><br><span class=\"line\"><span class=\"symbol\">ls:</span> cannot access <span class=\"symbol\">xiho:</span> No such file <span class=\"keyword\">or</span> directory</span><br><span class=\"line\">test1.sh</span><br></pre></td></tr></table></figure></p>\n<p>看到上面代码显示在屏幕上面，找不到文件路劲报错，正确输出与错误输出都显示在屏幕了，<strong>但是现在需要把正确输出写入suc.txt， 1&gt; 可以省略，不写，默认所至标准输出，把错误输出到err.txt，不输出到屏幕。</strong></p>\n<p>例子如下：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls test1<span class=\"selector-class\">.sh</span> xiho <span class=\"number\">1</span>&gt; suc<span class=\"selector-class\">.txt</span> <span class=\"number\">2</span>&gt;err.txt</span><br></pre></td></tr></table></figure>\n<p>然后我们分别查看suc.txt和err .txt的信息。</p>\n<p><img src=\"http://img.blog.csdn.net/20161001150059408\" alt=\"这里写图片描述\"></p>\n<p>将错误输出信息关闭掉</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root<span class=\"variable\">@iZ28t5k4ny4Z</span><span class=\"symbol\">:/usr/xiho/shell</span><span class=\"comment\"># ls test1.sh xiho 2&gt;&amp;-</span></span><br><span class=\"line\">test1.sh</span><br><span class=\"line\">root<span class=\"variable\">@iZ28t5k4ny4Z</span><span class=\"symbol\">:/usr/xiho/shell</span><span class=\"comment\"># ls test1.sh xiho 2&gt;/dev/null</span></span><br><span class=\"line\">test1.sh</span><br><span class=\"line\"></span><br><span class=\"line\">&amp;[n] 代表是已经存在的文件描述符，&amp;<span class=\"number\">1</span> 代表输出 &amp;<span class=\"number\">2</span>代表错误输出 &amp;-代表关闭与它绑定的描述符</span><br><span class=\"line\">/dev/null 这个设备，是linux 中黑洞设备，什么信息只要输出给这个设备，都会给吃掉，哈哈~</span><br></pre></td></tr></table></figure>\n<p>其他的追加操作符等，好玩的自己去试试。</p>\n<p><strong>注意：</strong><br>1、shell遇到”&gt;”操作符，会判断右边文件是否存在，如果存在就先删除，并且创建新文件。不存在直接创建。 无论左边命令执行是否成功。右边文件都会变为空。<br>2、“&gt;&gt;”操作符，判断右边文件，如果不存在，先创建。以添加方式打开文件，会分配一个文件描述符[不特别指定，默认为1,2]然后，与左边的标准输出（1）或错误输出（2） 绑定。<br>3、当命令：执行完，绑定文件的描述符也自动失效。0,1,2又会空闲。<br>4、一条命令启动，命令的输入，正确输出，错误输出，默认分别绑定0,1,2文件描述符。<br>5、一条命令在执行前，先会检查输出是否正确，如果输出设备错误，将不会进行命令执行。</p>\n<hr>\n<h4 id=\"2、Here-Document\"><a href=\"#2、Here-Document\" class=\"headerlink\" title=\"2、Here Document\"></a><strong>2、Here Document</strong></h4><p>Here Document是shell 中的一种特殊重定向方式，用来将输入重定向到一个交互式的shell脚本或程序。</p>\n<p>基本的格式如下：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">command</span> &lt;&lt; <span class=\"title\">EOF</span></span><br><span class=\"line\">\tdocument</span><br><span class=\"line\"><span class=\"literal\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>它的作用是将两个EOF之间的内容（docuemnt）作为输入传递给command。</p>\n<blockquote>\n<p>注意：</p>\n<ul>\n<li>结尾的EOF一定要顶个写，前面不能有任何字符，后面也不能有任何字符，包括空格和tab缩进。</li>\n<li>开始的EOF前后的空格不要被忽略掉。</li>\n</ul>\n</blockquote>\n<ul>\n<li><strong>实例</strong></li>\n</ul>\n<p>在命令行中通过wc -l 命令计算Here Document 的行数：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root<span class=\"variable\">@iZ28t5k4ny4Z</span><span class=\"symbol\">:/usr/xiho/shell</span><span class=\"comment\"># wc -l &lt;&lt; EOF</span></span><br><span class=\"line\">&gt; 学习使用shell 编程</span><br><span class=\"line\">&gt; www.xuhaoblog.com</span><br><span class=\"line\">&gt; EOF</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>输出的结果为2行。</p>\n<p>我们也可以将Here Document 用在脚本中，例如：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> #!/bin/bash                                                            </span><br><span class=\"line\">  <span class=\"number\">2</span> cat &lt;&lt; <span class=\"literal\">EOF</span></span><br><span class=\"line\">  <span class=\"number\">3</span> 学习使用shell脚本编程</span><br><span class=\"line\">  <span class=\"number\">4</span> www.xuhaoblog.com</span><br><span class=\"line\">  <span class=\"number\">5</span> <span class=\"literal\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>执行以上脚本输出的结果：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root<span class=\"variable\">@iZ28t5k4ny4Z</span><span class=\"symbol\">:/usr/xiho/shell</span><span class=\"comment\"># chmod u+x 05.sh </span></span><br><span class=\"line\">root<span class=\"variable\">@iZ28t5k4ny4Z</span><span class=\"symbol\">:/usr/xiho/shell</span><span class=\"comment\"># ./05.sh</span></span><br><span class=\"line\">学习使用shell脚本编程</span><br><span class=\"line\">www.xuhaoblog.com</span><br></pre></td></tr></table></figure>\n<p>Here Document 的简单使用就到这里，还有更多的操作符需要我们去练习。Linux shell脚本基础学习，我们差不多介绍完了，还有一个关于函数的，准备放到下一篇来讲。欢迎关注~</p>\n<hr>\n<h3 id=\"更多相关系列传送门：\"><a href=\"#更多相关系列传送门：\" class=\"headerlink\" title=\"更多相关系列传送门：\"></a>更多相关系列传送门：</h3><p><strong>【个人博客】shel 脚本系列</strong></p>\n<ul>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-01.html\">【Linux 系统编程】shell 脚本基础学习（一）</a></li>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-02.html\">【Linux 系统编程】shell 命令和流程控制（二）</a></li>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-03.html\">【Linux 系统编程】shell 流程控制loop和引号（三）</a></li>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-04.html\">【Linux 系统编程】shell 输入/输出重定向（四）</a></li>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-05.html\">【Linux 系统编程】shell 脚本基础学习之函数（五）</a></li>\n</ul>\n<blockquote>\n<p>本文由博主辛苦整理下来的笔记；<br>希望大家能够指点或提出宝贵意见，共同学习，谢谢！ </p>\n</blockquote>\n","categories":[{"name":"Shell","slug":"Shell","count":5,"path":"api/categories/Shell.json"}],"tags":[{"name":"Shell","slug":"Shell","count":5,"path":"api/tags/Shell.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}]}