{"title":"Shell 脚本基础学习之函数（五）","slug":"linux/shell-script-05","date":"2016-10-01T10:10:31.000Z","updated":"2017-12-17T16:07:31.000Z","comments":true,"path":"api/articles/linux/shell-script-05.json","photos":[],"link":"","excerpt":"前言Linux shell脚本基础学习我们这里就差不多讲完了，函数相信大家都不陌生吧，直接入正题吧~正文继上篇博客之后shell 函数Linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。<br>shell 中函数的定义格式如下：1<br>2<br>3<br>4<br>function_name () &#123;<br>    list of commands<br>    [ return value ]<br>&#125;<br>","covers":["http://img.blog.csdn.net/20161001175800334"],"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Linux shell脚本基础学习我们这里就差不多讲完了，函数相信大家都不陌生吧，直接入正题吧~</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p><a href=\"http://xuhaoblog.com/linux/shell-script-04.html\">继上篇博客之后</a></p>\n<h4 id=\"shell-函数\"><a href=\"#shell-函数\" class=\"headerlink\" title=\"shell 函数\"></a><strong>shell 函数</strong></h4><p>Linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。<br>shell 中函数的定义格式如下：</p>\n<figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span><span class=\"number\">_n</span>ame () &#123;</span><br><span class=\"line\">    list <span class=\"keyword\">of</span> commands</span><br><span class=\"line\">    [ <span class=\"keyword\">return</span> <span class=\"keyword\">value</span> ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n <a id=\"more\"></a>\n<p>说明：</p>\n<ul>\n<li>1、函数名前面也可以加上关键字function；</li>\n<li>2、函数的返回值，可以显示加：return 返回，如果不加，将以最后一条命令的运行结果作为返回值。</li>\n</ul>\n<p>shell 函数返回值只能是整数，一般用来表示函数执行是否政工，0表示成功，其他则表示失败。</p>\n<p>如果要让函数返回字符串，那么可以先定义一个变量，用来接收函数的计算结果，脚本在访问这个变量来获得函数的返回值。</p>\n<p>比如：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">1 </span>#!/bin/bash                                                            </span><br><span class=\"line\"><span class=\"symbol\">2 </span>Hello () &#123;</span><br><span class=\"line\"><span class=\"symbol\">3 </span>        echo <span class=\"string\">\"My name is xu hao\"</span></span><br><span class=\"line\"><span class=\"symbol\">4 </span>&#125;</span><br><span class=\"line\"><span class=\"symbol\">5 </span></span><br><span class=\"line\"><span class=\"symbol\">6 </span>#调用上面的函数</span><br><span class=\"line\"><span class=\"symbol\">7 </span>Hello</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root<span class=\"variable\">@iZ28t5k4ny4Z</span><span class=\"symbol\">:/usr/xiho/shell</span><span class=\"comment\"># ./06.sh </span></span><br><span class=\"line\">My name is xu hao</span><br></pre></td></tr></table></figure>\n<p><strong>调用函数只需要给出函数名，不需要加括号。</strong></p>\n<p>再来看一个带有return语句的函数：</p>\n<p>在上面例子后面添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">funWithReturn</span></span>() &#123;</span><br><span class=\"line\">11         <span class=\"built_in\">echo</span> <span class=\"string\">\"这个函数功能是得到两个数字的和\"</span></span><br><span class=\"line\">12         <span class=\"built_in\">echo</span> -n <span class=\"string\">\"请输入第一个数字\"</span></span><br><span class=\"line\">13         <span class=\"built_in\">read</span> aNum;</span><br><span class=\"line\">14         <span class=\"built_in\">echo</span> -n <span class=\"string\">\"请输入第二个数字\"</span></span><br><span class=\"line\">15         <span class=\"built_in\">read</span> bNum;</span><br><span class=\"line\">16         <span class=\"built_in\">echo</span> <span class=\"string\">\"这两个数分别是 <span class=\"variable\">$aNum</span> 和 <span class=\"variable\">$bNum</span> !\"</span></span><br><span class=\"line\">17   <span class=\"built_in\">return</span> $((<span class=\"variable\">$aNum</span>+<span class=\"variable\">$bNum</span>))</span><br><span class=\"line\">18 &#125; </span><br><span class=\"line\">19 </span><br><span class=\"line\">20 <span class=\"comment\">#调用funWithReturn这个函数</span></span><br><span class=\"line\">21 funWithReturn</span><br><span class=\"line\">22 </span><br><span class=\"line\">23 ret=$?</span><br><span class=\"line\">24 <span class=\"built_in\">echo</span> <span class=\"string\">\"The sun of two numbers is <span class=\"variable\">$ret</span> !\"</span></span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root<span class=\"variable\">@iZ28t5k4ny4Z</span><span class=\"symbol\">:/usr/xiho/shell</span><span class=\"comment\"># ./06.sh </span></span><br><span class=\"line\">My name is xu hao</span><br><span class=\"line\">这个函数功能是得到两个数字的和</span><br><span class=\"line\">请输入第一个数字<span class=\"number\">56</span></span><br><span class=\"line\">请输入第二个数字<span class=\"number\">23</span></span><br><span class=\"line\">这两个数分别是 <span class=\"number\">56</span> 和 <span class=\"number\">23</span> !</span><br><span class=\"line\">The sun of two numbers is <span class=\"number\">79</span> !</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>$?最后运行的命令的结束代码（返回值），这个在后面会总结的。</p>\n</blockquote>\n<hr>\n<h4 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a><strong>函数参数</strong></h4><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在<span class=\"keyword\">shell</span><span class=\"bash\"> 中，调用函数时可以向其传递参数，在函数体内部，通过<span class=\"variable\">$n</span> 的形式来获取参数，比如,<span class=\"variable\">$1</span>表示第一个参数，<span class=\"variable\">$2</span>表示第二个参数</span></span><br></pre></td></tr></table></figure>\n<p>再来看一个带参数的函数例子：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">28 </span>funWithParam() &#123;</span><br><span class=\"line\"><span class=\"symbol\">29 </span>        echo <span class=\"string\">\"第一个param为 $1\"</span></span><br><span class=\"line\"><span class=\"symbol\">30 </span>        echo <span class=\"string\">\"第二个param为 $2\"</span></span><br><span class=\"line\"><span class=\"symbol\">31 </span>        echo <span class=\"string\">\"第十个param为 $10\"</span></span><br><span class=\"line\"><span class=\"symbol\">32 </span>        echo <span class=\"string\">\"第十个param为 $&#123;10&#125;\"</span></span><br><span class=\"line\"><span class=\"symbol\">33 </span>        echo <span class=\"string\">\"参数总共有 $#\"</span></span><br><span class=\"line\"><span class=\"symbol\">34 </span>        echo <span class=\"string\">\"作为一个字符串输出所有参数 $* !\"</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span></span><br><span class=\"line\"><span class=\"symbol\">36 </span>&#125;</span><br><span class=\"line\"><span class=\"symbol\">37 </span>#调用函数并传递参数</span><br><span class=\"line\"><span class=\"symbol\">38 </span>funWithParam <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">23</span> <span class=\"number\">45</span> <span class=\"number\">22</span> <span class=\"number\">9</span> <span class=\"number\">25</span></span><br></pre></td></tr></table></figure>\n<p>运行脚本输出的结果为：</p>\n<p><img src=\"http://img.blog.csdn.net/20161001175800334\" alt=\"这里写图片描述\"></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在这里注意下，$ <span class=\"number\">10</span>不能获取第<span class=\"number\">10</span>个参数，当n&gt;=<span class=\"number\">10</span>时，需要$&#123;n&#125;来获取参数。</span><br></pre></td></tr></table></figure>\n<p><strong>另外：在补充几个特殊字符来处理的参数</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"comment\">#\t传递到脚本的参数个数</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">*\t以一个单字符串显示所有向脚本传递的参数</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">$\t脚本运行的当前进程ID号</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">!\t后台运行的最后一个进程的ID号</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">@\t与$*相同，但是使用时加引号，并在引号中返回每个参数。</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">-\t显示Shell使用的当前选项，与<span class=\"built_in\">set</span>命令功能相同。</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">?\t显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</span></span><br></pre></td></tr></table></figure>\n<p>一下午整理这两篇博客，算是把Linux shell 脚本的基础的理论学习讲完了，更多的细节只有等我们遇到了在慢慢琢磨吧！吃饭~</p>\n<hr>\n<h2 id=\"更多相关系列传送门：\"><a href=\"#更多相关系列传送门：\" class=\"headerlink\" title=\"更多相关系列传送门：\"></a>更多相关系列传送门：</h2><p><strong>【个人博客】shel 脚本系列</strong></p>\n<ul>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-01.html\">【Linux 系统编程】shell 脚本基础学习（一）</a></li>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-02.html\">【Linux 系统编程】shell 命令和流程控制（二）</a></li>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-03.html\">【Linux 系统编程】shell 流程控制loop和引号（三）</a></li>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-04.html\">【Linux 系统编程】shell 输入/输出重定向（四）</a></li>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-05.html\">【Linux 系统编程】shell 脚本基础学习之函数（五）</a></li>\n</ul>\n<blockquote>\n<p>本文由博主辛苦整理下来的笔记；<br>希望大家能够指点或提出宝贵意见，共同学习，谢谢！ </p>\n</blockquote>\n","categories":[{"name":"Shell","slug":"Shell","count":5,"path":"api/categories/Shell.json"}],"tags":[{"name":"Shell","slug":"Shell","count":5,"path":"api/tags/Shell.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}]}