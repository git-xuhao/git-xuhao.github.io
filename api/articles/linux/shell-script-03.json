{"title":"Shell 流程控制Loop和引号（三）","slug":"linux/shell-script-03","date":"2016-09-30T03:06:31.000Z","updated":"2017-12-17T16:07:26.000Z","comments":true,"path":"api/articles/linux/shell-script-03.json","photos":[],"link":"","excerpt":"前言Linux shell 脚本基础学习第三篇；<br>上一篇Liunx shell  脚本基础学习中，我们讲到了Linux shell 脚本中控制流程的if、select、case，这里接着介绍Linux shell 脚本控制流程的loop和引导，控制流程这部分内容较多，还有一部分是关于here document。<br>","covers":["http://img.blog.csdn.net/20160930140550992"],"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Linux shell 脚本基础学习第三篇；<br><a href=\"http://xuhaoblog.com/linux/shell-script-02.html\">上一篇</a>Liunx shell  脚本基础学习中，我们讲到了Linux shell 脚本中控制流程的if、select、case，这里接着介绍Linux shell 脚本控制流程的loop和引导，控制流程这部分内容较多，还有一部分是关于here document。<br><a id=\"more\"></a></p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p><a href=\"http://xuhaoblog.com/linux/shell-script-02.html\">继上篇之后</a></p>\n<h4 id=\"4、loop\"><a href=\"#4、loop\" class=\"headerlink\" title=\"4、loop\"></a><strong>4、loop</strong></h4><p>loop 表达式：</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"params\">...</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"params\">...</span></span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>while- loop 将运行一直到表达式测试为真。<br>（will run while the expression that we test for is true.）</p>\n<p>关键字“break”用来跳出循环。而关键字“continue”用来不执行余下的部分而直接太偶倒下一个循环。</p>\n<p>for-loop 表达式查看一个字符串列表（字符串用空格分隔）然后将其赋给一个变量：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"built_in\">..</span><span class=\"built_in\">..</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<!-- more -->\n<p>在下面的例子中，将分别打印ABC到屏幕上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> A B C ; <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"var is <span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>下面是一个更为有用的脚本<strong>showrpm</strong>，其功能是打印一些RPM包的统计信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># list a content summary of a number of RPM packages</span></span><br><span class=\"line\"><span class=\"comment\"># USAGE: showrpm rpmfile1 rpmfile2 ...\t</span></span><br><span class=\"line\"><span class=\"comment\"># EXAMPLE: showrpm /cdrom/RedHat/RPMS/*.rpm</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> rpmpackage <span class=\"keyword\">in</span> $*; <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -r <span class=\"string\">\"<span class=\"variable\">$rpmpackage</span>\"</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"=============== <span class=\"variable\">$rpmpackage</span> ==============\"</span></span><br><span class=\"line\">rpm -qi -p <span class=\"variable\">$rpmpackage</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"ERROR: cannot read file <span class=\"variable\">$rpmpackage</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>这里出现了第二个特殊的变量$*，该变量包含了所有输入的命令行参数值。<br>如果您运行</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">showrpm openssh<span class=\"selector-class\">.rpm</span> w3m<span class=\"selector-class\">.rpm</span> webgrep.rpm</span><br></pre></td></tr></table></figure>\n<p><strong>此时 $* 包含了 3 个字符串，即openssh.rpm, w3m.rpm and webgrep.rpm</strong></p>\n<hr>\n<h4 id=\"5、引号\"><a href=\"#5、引号\" class=\"headerlink\" title=\"5、引号\"></a><strong>5、引号</strong></h4><p>在想程序传递任何参数之前，程序会扩展通配符和变量。这里所谓的扩展的意思是程序会把通配符（比如*）替换成合适的文件名，它变量替换成变量值。为了防止程序做这种替换，您可以使用引号。</p>\n<p><font color=\"blue\" size=\"4\"><strong>下面是shell引用类型:</strong></font></p>\n<ul>\n<li>“”  双引号</li>\n<li>‘’   单引号</li>\n<li>`    反引号</li>\n<li>\\    反斜线</li>\n</ul>\n<h5 id=\"5-1、双引号\"><a href=\"#5-1、双引号\" class=\"headerlink\" title=\"5.1、双引号\"></a><strong>5.1、双引号</strong></h5><p>使用双引号，可引用除了字符$、`、\\外的任意字符或字符串。<br>例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">STR=<span class=\"string\">\"My name is xuhao\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$STR</span>\"</span></span><br></pre></td></tr></table></figure></p>\n<p>输出：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">My <span class=\"built_in\">name</span> <span class=\"keyword\">is</span> xuhao</span><br></pre></td></tr></table></figure>\n<p>也可以去掉双引号：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$STR</span></span><br></pre></td></tr></table></figure>\n<p>执行脚本输出的结果还是一样的。</p>\n<p><font color=\"red\">双引号可以使具有特殊含义的词失去其原本的意义，如下：</font></p>\n<p><img src=\"http://img.blog.csdn.net/20160930140550992\" alt=\"这里写图片描述\"></p>\n<p>特殊含义的cal,执行的是显示出2016年 12月的日历。</p>\n<p>但是我们将cal 命令复制给一个变量，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CAL=<span class=\"string\">\"cal\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$CAL</span></span><br></pre></td></tr></table></figure>\n<p>最后输出cal<br>这里，双引号使cal 命令失去了原有的显示日历的功能；在这里双引号类似于转义字符。</p>\n<h5 id=\"5-2、单引号\"><a href=\"#5-2、单引号\" class=\"headerlink\" title=\"5.2、单引号\"></a><strong>5.2、单引号</strong></h5><p>　　单引号与双引号类似，不同的是shell 会忽略任何引用值，即屏蔽的单引号内的特殊字符的原本含义。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo ‘<span class=\"keyword\">my</span> <span class=\"built_in\">name</span> <span class=\"keyword\">is</span> $LOGNAME’</span><br><span class=\"line\">其结果为：</span><br><span class=\"line\"><span class=\"keyword\">my</span> <span class=\"built_in\">name</span> <span class=\"keyword\">is</span> $LOGNAME</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-3、单引号和双引号的区别\"><a href=\"#5-3、单引号和双引号的区别\" class=\"headerlink\" title=\"5.3、单引号和双引号的区别\"></a><strong>5.3、单引号和双引号的区别</strong></h5><p>单引号‘’：取消除单引号以外的任何字符的特殊含义。<br>如：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`echo ‘<span class=\"keyword\">my</span> <span class=\"built_in\">name</span> <span class=\"keyword\">is</span> $<span class=\"built_in\">name</span>`’</span><br></pre></td></tr></table></figure>\n<p>其结果为：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> <span class=\"built_in\">name</span> <span class=\"keyword\">is</span> $<span class=\"built_in\">name</span></span><br><span class=\"line\">此时$只作为一个普通字符使用了。 </span><br><span class=\"line\">双引号“”：取消除双引号、$号以及_号以外的所有字符的特殊含义</span><br></pre></td></tr></table></figure>\n<p>单引号是强引用，引号里的值是什么，变量的值就是什么；</p>\n<p>双引号是弱引用，引号里的值若再包含变量，那在赋值的时候，所有这些变量就被立即替换了。</p>\n<h5 id=\"5-4、反引号\"><a href=\"#5-4、反引号\" class=\"headerlink\" title=\"5.4、反引号\"></a><strong>5.4、反引号</strong></h5><p>反引号（`）用于设置系统命令输出到变量，shell认为反引号中的内容是一个系统命令，<br>所以将会执行之：</p>\n<figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo `date`</span><br><span class=\"line\"><span class=\"symbol\">Mon Dec 24 16:06:</span><span class=\"number\">55</span> CST <span class=\"number\">2012</span></span><br></pre></td></tr></table></figure>\n<p>这和直接输入date命令是一样的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">date</span></span><br><span class=\"line\"><span class=\"selector-tag\">Mon</span> <span class=\"selector-tag\">Dec</span> 24 16<span class=\"selector-pseudo\">:07</span><span class=\"selector-pseudo\">:12</span> <span class=\"selector-tag\">CST</span> 2012</span><br></pre></td></tr></table></figure>\n<p>若输入一个非系统命令，则shell不认识此命令，将会报错：<br><figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> `<span class=\"built_in\">DATE</span>`</span><br><span class=\"line\">ksh: <span class=\"built_in\">DATE</span>: <span class=\"built_in\">not</span> found</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"5-5、反斜杠\"><a href=\"#5-5、反斜杠\" class=\"headerlink\" title=\"5.5、反斜杠\"></a><strong>5.5、反斜杠</strong></h5><p>反斜杠起的作用是将一些特殊字符按原样输出，这些特殊字符有：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">、*、`、+、^、&amp;、|、<span class=\"string\">\"、?。</span></span></span><br></pre></td></tr></table></figure>\n<p>例如：echo *<br>将当前目录下的文件名和目录名都列出来。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> \\*</span><br><span class=\"line\">*</span><br></pre></td></tr></table></figure>\n<p>而使用反斜杠转义之后，就输出了星号。</p>\n<hr>\n<h2 id=\"更多相关系列传送门：\"><a href=\"#更多相关系列传送门：\" class=\"headerlink\" title=\"更多相关系列传送门：\"></a>更多相关系列传送门：</h2><p><strong>【个人博客】shel 脚本系列</strong></p>\n<ul>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-01.html\">【Linux 系统编程】shell 脚本基础学习（一）</a></li>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-02.html\">【Linux 系统编程】shell 命令和流程控制（二）</a></li>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-03.html\">【Linux 系统编程】shell 流程控制loop和引号（三）</a></li>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-04.html\">【Linux 系统编程】shell 输入/输出重定向（四）</a></li>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-05.html\">【Linux 系统编程】shell 脚本基础学习之函数（五）</a></li>\n</ul>\n<blockquote>\n<p>本文由博主辛苦整理下来的笔记；<br>希望大家能够指点或提出宝贵意见，共同学习，谢谢！ </p>\n</blockquote>\n","categories":[{"name":"Shell","slug":"Shell","count":5,"path":"api/categories/Shell.json"}],"tags":[{"name":"Shell","slug":"Shell","count":5,"path":"api/tags/Shell.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}]}