{"title":"Shell 命令和流程控制（二）","slug":"linux/shell-script-02","date":"2016-09-29T08:06:31.000Z","updated":"2017-12-17T16:07:20.000Z","comments":true,"path":"api/articles/linux/shell-script-02.json","photos":[],"link":"","excerpt":"前言Linxu shell 脚本基础这里介绍到第二篇，详细介绍shell 命令和流程控制，这部分介绍三类命令，在学习时大家应该加以比较学习。<br>Linux shell脚本基础课程前面一篇介绍的都是语法基础的开头、注释、变量和 环境变量，这里将介绍shell命令和控制流程的第一部分，在shell脚本中可以使用三类命令，而控制流程就放在下一讲吧。<br>","covers":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Linxu shell 脚本基础这里介绍到第二篇，详细介绍shell 命令和流程控制，这部分介绍三类命令，在学习时大家应该加以比较学习。<br>Linux shell脚本基础课程<a href=\"http://xuhaoblog.com/linux/shell-script-01.html\">前面一篇</a>介绍的都是语法基础的开头、注释、变量和 环境变量，这里将介绍shell命令和控制流程的第一部分，在shell脚本中可以使用三类命令，而控制流程就放在下一讲吧。<br><a id=\"more\"></a></p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h2 id=\"1-1-5-Shell命令和流程控制\"><a href=\"#1-1-5-Shell命令和流程控制\" class=\"headerlink\" title=\"1.1.5 Shell命令和流程控制\"></a><strong>1.1.5 Shell命令和流程控制</strong></h2><p>在shell脚本中可以使用三类命令：</p>\n<h3 id=\"1-Unix-命令\"><a href=\"#1-Unix-命令\" class=\"headerlink\" title=\"1)Unix 命令:\"></a><strong>1)Unix 命令:</strong></h3><p>虽然在shell脚本中可以使用任意的unix命令，但是还是由一些相对更常用的命令。这些命令通常是用来进行文件和文字操作的。</p>\n<p>常用命令语法及功能</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"some text\"</span>: 将文字内容打印在屏幕上</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">l</span><span class=\"variable\">s:</span> 文件列表</span><br><span class=\"line\"></span><br><span class=\"line\">wc –<span class=\"keyword\">l</span> filewc -<span class=\"keyword\">w</span> filewc -<span class=\"keyword\">c</span> <span class=\"keyword\">file</span>: 计算文件行数计算文件中的单词数计算文件中的字符数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">cp</span> sourcefile destfile: 文件拷贝</span><br><span class=\"line\"></span><br><span class=\"line\">mv oldname newname : 重命名文件或移动文件</span><br><span class=\"line\"></span><br><span class=\"line\">rm <span class=\"keyword\">file</span>: 删除文件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">grep</span> <span class=\"string\">'pattern'</span> <span class=\"keyword\">file</span>: 在文件内搜索字符串比如：<span class=\"keyword\">grep</span> <span class=\"string\">'searchstring'</span> <span class=\"keyword\">file</span>.txt</span><br><span class=\"line\"></span><br><span class=\"line\">cut -<span class=\"keyword\">b</span> colnum <span class=\"keyword\">file</span>: 指定欲显示的文件内容范围，并将它们输出到标准输出设备比如：输出每行第<span class=\"number\">5</span>个到第<span class=\"number\">9</span>个字</span><br><span class=\"line\">符cut -b5-<span class=\"number\">9</span> <span class=\"keyword\">file</span>.txt千万不要和<span class=\"keyword\">cat</span>命令混淆，这是两个完全不同的命令</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">cat</span> <span class=\"keyword\">file</span>.tx<span class=\"variable\">t:</span> 输出文件内容到标准输出设备（屏幕）上</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">file</span> somefile: 得到文件类型</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">read</span> var: 提示用户输入，并将输入赋值给变量</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sort</span> <span class=\"keyword\">file</span>.tx<span class=\"variable\">t:</span> 对<span class=\"keyword\">file</span>.txt文件中的行进行排序</span><br><span class=\"line\"></span><br><span class=\"line\">uniq: 删除文本文件中出现的行列比如： <span class=\"keyword\">sort</span> <span class=\"keyword\">file</span>.txt | uniq</span><br><span class=\"line\"></span><br><span class=\"line\">expr: 进行数学运算Example: <span class=\"built_in\">add</span> <span class=\"number\">2</span> <span class=\"built_in\">and</span> <span class=\"number\">3</span>expr <span class=\"number\">2</span> <span class=\"string\">\"+\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">find</span>: 搜索文件比如：根据文件名搜索<span class=\"keyword\">find</span> . -name filename -<span class=\"keyword\">print</span></span><br><span class=\"line\"></span><br><span class=\"line\">tee: 将数据输出到标准输出设备(屏幕) 和文件比如：somecommand | tee outfile</span><br><span class=\"line\"></span><br><span class=\"line\">basename <span class=\"keyword\">file</span>: 返回不包含路径的文件名比如： basename /bin/tux将返回 tux</span><br><span class=\"line\"></span><br><span class=\"line\">dirname <span class=\"keyword\">file</span>: 返回文件所在路径比如：dirname /bin/tux将返回 /bin</span><br><span class=\"line\"></span><br><span class=\"line\">head <span class=\"keyword\">file</span>: 打印文本文件开头几行</span><br><span class=\"line\"></span><br><span class=\"line\">tail <span class=\"keyword\">file</span> : 打印文本文件末尾几行</span><br><span class=\"line\"></span><br><span class=\"line\">sed: Sed是一个基本的查找替换程序。可以从标准输入（比如命令管道）读入文本，并将</span><br><span class=\"line\">结果输出到标准输出（屏幕）。该命令采用正则表达式（见参考）进行搜索。不要和<span class=\"keyword\">shell</span>中的通配符相混淆。比如：将linuxfocus 替换为LinuxFocus ：<span class=\"keyword\">cat</span> text.<span class=\"keyword\">file</span> | sed <span class=\"string\">'s/linuxfocus/LinuxFocus/'</span> &gt; </span><br><span class=\"line\"></span><br><span class=\"line\">newtext.fileawk: awk 用来从文本文件中提取字段。缺省地，字段分割符是空格，可以使用-F指定其他分割符。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">cat</span> <span class=\"keyword\">file</span>.txt | awk -F, <span class=\"string\">'&#123;print $1 \",\" $3 &#125;'</span>这里我们使用，作为字段分割符，同时打印第一个和第三个字段。如果该文件内容如下： Adam Bor, <span class=\"number\">34</span>, IndiaKerry Miller, <span class=\"number\">22</span>, USA命令输出结果为：Adam Bor, IndiaKerry Miller, USA</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"2-概念-管道-重定向和-backtick\"><a href=\"#2-概念-管道-重定向和-backtick\" class=\"headerlink\" title=\"2) 概念: 管道, 重定向和 backtick\"></a><strong>2) 概念: 管道, 重定向和 backtick</strong></h3><font color=\"red\">这些不是系统命令，但是他们真的很重要。</font>\n\n<p><strong>管道 (|)：</strong><br> 将一个命令的输出作为另外一个命令的输入。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grep</span> <span class=\"string\">\"hello\"</span> <span class=\"keyword\">file</span>.txt | wc -l</span><br></pre></td></tr></table></figure>\n<p>在file.txt中搜索包含有”hello”的行并计算其行数。<br>在这里grep命令的输出作为wc命令的输入。当然您可以使用多个命令。</p>\n<p><strong>重定向：</strong><br>将命令的结果输出到文件，而不是标准输出（屏幕）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> 写入文件并覆盖旧文件</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt; 加到文件的尾部，保留旧文件内容。</span></span><br></pre></td></tr></table></figure>\n<p><strong>反短斜线：</strong><br>使用反短斜线可以将一个命令的输出作为另外一个命令的一个命令行参数。<br>命令：</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">find</span> . -mtime -<span class=\"number\">1</span> -<span class=\"built_in\">type</span> f -<span class=\"built_in\">print</span></span><br></pre></td></tr></table></figure>\n<p>用来查找过去24小时（-mtime –2则表示过去48小时）内修改过的文件。如果您想将所有查找到的文件打一个包，则可以使用以下脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># The ticks are backticks (`) not normal quotes ('):</span></span><br><span class=\"line\">tar -zcvf lastmod.tar.gz `find . -mtime -1 -<span class=\"built_in\">type</span> f -<span class=\"built_in\">print</span>`</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"3-流程控制\"><a href=\"#3-流程控制\" class=\"headerlink\" title=\"3) 流程控制\"></a><strong>3) 流程控制</strong></h3><h4 id=\"1-if\"><a href=\"#1-if\" class=\"headerlink\" title=\"1.if\"></a><strong>1.if</strong></h4><p>“if” 表达式 如果条件为真则执行then后面的部分：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">..</span><span class=\"built_in\">..</span>; then</span><br><span class=\"line\"><span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">elif <span class=\"built_in\">..</span><span class=\"built_in\">..</span>; then</span><br><span class=\"line\"><span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure></p>\n<p>大多数情况下，可以使用测试命令来对条件进行测试。比如可以比较字符串、判断文件是否存在及是否可读等等…</p>\n<p>通常用” [ ] “来表示条件测试。注意这里的空格很重要。要确保方括号的空格。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ -f <span class=\"string\">\"somefile\"</span> ] ：判断是否是一个文件</span><br><span class=\"line\">[ -x <span class=\"string\">\"/bin/ls\"</span> ] ：判断/bin/ls是否存在并有可执行权限</span><br><span class=\"line\">[ -n <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span> ] ：判断<span class=\"variable\">$var</span>变量是否有值</span><br><span class=\"line\">[ <span class=\"string\">\"<span class=\"variable\">$a</span>\"</span> = <span class=\"string\">\"<span class=\"variable\">$b</span>\"</span> ] ：判断<span class=\"variable\">$a</span>和<span class=\"variable\">$b</span>是否相等</span><br></pre></td></tr></table></figure>\n<p>执行man test可以查看所有测试表达式可以比较和判断的类型。<br>直接执行以下脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$SHELL</span>\"</span> = <span class=\"string\">\"/bin/bash\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"your login shell is the bash (bourne again shell)\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"your login shell is not bash but <span class=\"variable\">$SHELL</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>变量$SHELL包含了登录shell的名称，我们和/bin/bash进行了比较。<br>快捷操作符<br>熟悉C语言的朋友可能会很喜欢下面的表达式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ -f <span class=\"string\">\"/etc/shadow\"</span> ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">\"This computer uses shadow passwors\"</span></span><br></pre></td></tr></table></figure>\n<p>这里 &amp;&amp; 就是一个快捷操作符，如果左边的表达式为真则执行右边的语句。</p>\n<p>您也可以认为是逻辑运算中的与操作。上例中表示如果/etc/shadow文件存在则打印” This computer uses shadow passwors”。同样或操作(||)在shell编程中也是可用的。这里有个例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">mailfolder=/var/spool/mail/james</span><br><span class=\"line\">[ -r <span class=\"string\">\"<span class=\"variable\">$mailfolder</span>\"</span> ]<span class=\"string\">' '</span>&#123; <span class=\"built_in\">echo</span> <span class=\"string\">\"Can not read <span class=\"variable\">$mailfolder</span>\"</span> ; <span class=\"built_in\">exit</span> 1; &#125;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$mailfolder</span> has mail from:\"</span></span><br><span class=\"line\">grep <span class=\"string\">\"^From \"</span> <span class=\"variable\">$mailfolder</span></span><br></pre></td></tr></table></figure>\n<p>该脚本首先判断mailfolder是否可读。如果可读则打印该文件中的”From” 一行。如果不可读则或操作生效，打印错误信息后脚本退出。这里有个问题，那就是我们必须有两个命令：</p>\n<ul>\n<li>打印错误信息</li>\n<li>退出程序<br>我们使用花括号以匿名函数的形式将两个命令放到一起作为一个命令使用。一般函数将在下文提及。<br>不用与和或操作符，我们也可以用if表达式作任何事情，但是使用与或操作符会更便利很多。</li>\n</ul>\n<h4 id=\"2-case\"><a href=\"#2-case\" class=\"headerlink\" title=\"2.case\"></a><strong>2.case</strong></h4><p><strong>case :</strong>表达式可以用来匹配一个给定的字符串，而不是数字。</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"params\">...</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"><span class=\"params\">...</span>) <span class=\"keyword\">do</span> something here ;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n<p>让我们看一个例子。 file命令可以辨别出一个给定文件的文件类型，比如：<br>file lf.gz<br>这将返回：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">lf</span><span class=\"selector-class\">.gz</span>: <span class=\"selector-tag\">gzip</span> <span class=\"selector-tag\">compressed</span> <span class=\"selector-tag\">data</span>, <span class=\"selector-tag\">deflated</span>, <span class=\"selector-tag\">original</span> <span class=\"selector-tag\">filename</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">last</span> <span class=\"selector-tag\">modified</span>: <span class=\"selector-tag\">Mon</span> <span class=\"selector-tag\">Aug</span> 27 23<span class=\"selector-pseudo\">:09</span><span class=\"selector-pseudo\">:18</span> 2001, <span class=\"selector-tag\">os</span>: <span class=\"selector-tag\">Unix</span></span><br></pre></td></tr></table></figure>\n<p>我们利用这一点写了一个叫做smartzip的脚本，该脚本可以自动解压bzip2, gzip 和zip 类型的压缩文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">ftype=`file <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span>`</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$ftype</span>\"</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"><span class=\"string\">\"<span class=\"variable\">$1</span>: Zip archive\"</span>*)</span><br><span class=\"line\">unzip <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ;;</span><br><span class=\"line\"><span class=\"string\">\"<span class=\"variable\">$1</span>: gzip compressed\"</span>*)</span><br><span class=\"line\">gunzip <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ;;</span><br><span class=\"line\"><span class=\"string\">\"<span class=\"variable\">$1</span>: bzip2 compressed\"</span>*)</span><br><span class=\"line\">bunzip2 <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ;;</span><br><span class=\"line\">*) <span class=\"built_in\">echo</span> <span class=\"string\">\"File <span class=\"variable\">$1</span> can not be uncompressed with smartzip\"</span>;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n<p>您可能注意到我们在这里使用了一个特殊的变量$1。该变量包含了传递给该程序的第一个参数值。<br>也就是说，当我们运行：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">smartzip</span> <span class=\"selector-tag\">articles</span><span class=\"selector-class\">.zip</span></span><br></pre></td></tr></table></figure>\n<p>$1 就是字符串 articles.zip</p>\n<h4 id=\"3-selsect\"><a href=\"#3-selsect\" class=\"headerlink\" title=\"3. selsect\"></a><strong>3. selsect</strong></h4><p>select 表达式是一种bash的扩展应用，尤其擅长于交互式使用。用户可以从一组不同的值中进行选择。</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">var</span> <span class=\"keyword\">in</span> <span class=\"params\">...</span> ; <span class=\"keyword\">do</span></span><br><span class=\"line\">break</span><br><span class=\"line\">done\t</span><br><span class=\"line\"><span class=\"params\">...</span>. now $var can be used <span class=\"params\">...</span>.</span><br></pre></td></tr></table></figure>\n<p>下面是一个例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"What is your favourite OS?\"</span></span><br><span class=\"line\">select var <span class=\"keyword\">in</span> <span class=\"string\">\"Linux\"</span> <span class=\"string\">\"Gnu Hurd\"</span> <span class=\"string\">\"Free BSD\"</span> <span class=\"string\">\"Other\"</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">break</span>\t</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"You have selected <span class=\"variable\">$var</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>下面是该脚本运行的结果：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">What is your favourite OS?</span><br><span class=\"line\"><span class=\"number\">1</span>) Linux</span><br><span class=\"line\"><span class=\"number\">2</span>) Gnu Hurd</span><br><span class=\"line\"><span class=\"number\">3</span>) Free BSD</span><br><span class=\"line\"><span class=\"number\">4</span>) Other</span><br><span class=\"line\">#? <span class=\"number\">1</span></span><br><span class=\"line\">You have selected Linux</span><br></pre></td></tr></table></figure>\n<p>上面就是这一篇的内容，控制流程比较多，这里先介绍这三个。下篇继续。。。</p>\n<hr>\n<h2 id=\"更多相关系列传送门：\"><a href=\"#更多相关系列传送门：\" class=\"headerlink\" title=\"更多相关系列传送门：\"></a>更多相关系列传送门：</h2><p><strong>【个人博客】shel 脚本系列</strong></p>\n<ul>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-01.html\">【Linux 系统编程】shell 脚本基础学习（一）</a></li>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-02.html\">【Linux 系统编程】shell 命令和流程控制（二）</a></li>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-03.html\">【Linux 系统编程】shell 流程控制loop和引号（三）</a></li>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-04.html\">【Linux 系统编程】shell 输入/输出重定向（四）</a></li>\n<li><a href=\"http://xuhaoblog.com/linux/shell-script-05.html\">【Linux 系统编程】shell 脚本基础学习之函数（五）</a></li>\n</ul>\n<blockquote>\n<p>本文由博主辛苦整理下来的笔记；<br>希望大家能够指点或提出宝贵意见,共同学习，谢谢！ </p>\n</blockquote>\n","categories":[{"name":"Shell","slug":"Shell","count":5,"path":"api/categories/Shell.json"}],"tags":[{"name":"Shell","slug":"Shell","count":5,"path":"api/tags/Shell.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}]}