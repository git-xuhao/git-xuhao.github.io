{"title":"Android 网络请求库Retrofit简单使用","slug":"android-retrofit","date":"2016-04-12T08:20:24.000Z","updated":"2017-12-17T15:41:57.000Z","comments":true,"path":"api/articles/android-retrofit.json","photos":[],"link":"","excerpt":"什么是 Retrofit ?Retrofit是一套 RESTful 架构的 Android（Java）客户端实现，基于注解，提供 JSON to POJO（Plain Ordinary Java Object ，简单Java对象），POJO to JSON，网络请求（POST，GET， PUT，DELETE 等）封装。","covers":["http://img.blog.csdn.net/20160408133309596","http://img.blog.csdn.net/20160408133322319","http://img.blog.csdn.net/20160408133246502"],"content":"<h2 id=\"什么是-Retrofit\"><a href=\"#什么是-Retrofit\" class=\"headerlink\" title=\"什么是 Retrofit ?\"></a><strong>什么是 Retrofit ?</strong></h2><p>Retrofit是一套 RESTful 架构的 Android（Java）客户端实现，基于注解，提供 JSON to POJO（Plain Ordinary Java Object ，简单Java对象），POJO to JSON，网络请求（POST，GET， PUT，DELETE 等）封装。</p>\n<a id=\"more\"></a>\n<p>既然只是一个网络请求封装库，现在已经有了那么多的大家已经耳熟能详的网络请求封装库了，为什么还要介绍它呢，原因在于 Retrofit 是一套注解形的网络请求封装库，让我们的代码结构更给为清晰。它可以直接解析JSON数据变成JAVA对象，甚至支持回调操作，处理不同的结果。<br>想更详细的了解 Retrofit，可以查看<a href=\"http://square.github.io/retrofit/\" target=\"_blank\" rel=\"noopener\">官方文档</a> 。</p>\n<p>话不多说，直入主题~~</p>\n<h3 id=\"一、集成\"><a href=\"#一、集成\" class=\"headerlink\" title=\"一、集成\"></a><strong>一、集成</strong></h3><p>目前我使用的是AndroidStudio,那么在model的build.gradle文件中添加以下引用：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">'com.squareup.okhttp3:okhttp:3.2.0'</span> </span><br><span class=\"line\">compile <span class=\"string\">'com.squareup.retrofit2:retrofit:2.0.0-beta4'</span></span><br><span class=\"line\">compile <span class=\"string\">'com.squareup.retrofit2:converter-gson:2.0.0-beta3'</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>说明：</strong></p>\n<p>Retrofit依赖于okhttp，所以需要集成okhttp<br>API返回的数据为JSON格式，在此我使用的是Gson对返回数据解析.<strong>请使用最新版的Gson</strong></p>\n<h3 id=\"二、返回的数据格式\"><a href=\"#二、返回的数据格式\" class=\"headerlink\" title=\"二、返回的数据格式\"></a><strong>二、返回的数据格式</strong></h3><p>使用的是百度API的数据接口：<a href=\"http://apistore.baidu.com/apiworks/servicedetail/1756.html\" target=\"_blank\" rel=\"noopener\">名人名言API</a><br><img src=\"http://img.blog.csdn.net/20160408133309596\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20160408133322319\" alt=\"这里写图片描述\"></p>\n<p>该接口的API主机地址为：<a href=\"http://apistore.baidu.com；\" target=\"_blank\" rel=\"noopener\">http://apistore.baidu.com；</a><br>需要访问的接口：avatardata/mingrenmingyan/lookup；</p>\n<p>需要一个key等于apikey的Header和一个keyword等于<strong>名人名言</strong>的查询关键字,而且该请求为<strong>GET</strong>请求.</p>\n<p>访问该API返回的数据格式如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"total\"</span>: <span class=\"number\">914</span>,</span><br><span class=\"line\">    <span class=\"string\">\"result\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"famous_name\"</span>: <span class=\"string\">\"布兰登\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"famous_saying\"</span>: <span class=\"string\">\"人生至善，就是对生活乐观，对工作愉快，对事业兴奋。\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"famous_name\"</span>: <span class=\"string\">\"魏书生\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"famous_saying\"</span>: <span class=\"string\">\"抽打自己的鞭子要掌握在自己的手里，在漫长的人生道路的每一步上，都要经常鞭策自警，万不可以为有过一两次抽打就可以沿途平安了。\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"famous_name\"</span>: <span class=\"string\">\"亨·易卜生\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"famous_saying\"</span>: <span class=\"string\">\"夺走了普通人生活的幻想，也就等于夺去了他的幸福\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"famous_name\"</span>: <span class=\"string\">\"佚名\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"famous_saying\"</span>: <span class=\"string\">\"不知道自己走向何方的人，大都是人生的匆匆过客。\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"famous_name\"</span>: <span class=\"string\">\"南丁格尔\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"famous_saying\"</span>: <span class=\"string\">\"人生欲求安全，当有五要。一是清洁空气，二是澄清饮水，三是流通沟渠，四是扫洒屋宇，五是日光充足。\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"error_code\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">\"reason\"</span>: <span class=\"string\">\"Succes\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三、AndroidStudio插件-GsonFormat\"><a href=\"#三、AndroidStudio插件-GsonFormat\" class=\"headerlink\" title=\"三、AndroidStudio插件 GsonFormat\"></a><strong>三、AndroidStudio插件<a href=\"https://plugins.jetbrains.com/plugin/7654?pr=androidstudio\" target=\"_blank\" rel=\"noopener\"> GsonFormat</a></strong></h3><p>我们根据上面API返回的json数据来创建一个FamousInfo数据对象，我们可以利用AndroidStudio插件<a href=\"https://plugins.jetbrains.com/plugin/7654?pr=androidstudio\" target=\"_blank\" rel=\"noopener\"> GsonFormat</a> 快速，方便的将json数据转为Java 对象，<br>FamousInfo.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.woyou.androidsample.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by Xiho on 2016/3/14.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FamousInfo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * total : 227</span></span><br><span class=\"line\"><span class=\"comment\">     * result : [&#123;\"famous_name\":\"车尔尼雪夫斯基\",\"famous_saying\":\"非凡的单纯，非凡的明确\\u2014\\u2014这是天才的智慧的最可惊人的品质。\"&#125;,&#123;\"famous_name\":\"约·德莱顿\",\"famous_saying\":\"天才在社会生活中往往显得迟钝而\"&#125;,&#123;\"famous_name\":\"雨果\",\"famous_saying\":\"敢于冲撞命运才是天才\"&#125;,&#123;\"famous_name\":\"卡莱尔\",\"famous_saying\":\"所谓天才，就是比任何人都先抵挡痛苦的经验本领。\"&#125;,&#123;\"famous_name\":\"林肯\",\"famous_saying\":\"卓越的天才不屑走一条人家走过的路。他寻找迄今没有开拓过的地区。\"&#125;,&#123;\"famous_name\":\"席勒\",\"famous_saying\":\"产生天才的土壤比天才还要难找\"&#125;,&#123;\"famous_name\":\"爱因斯坦\",\"famous_saying\":\"任何天才不能在孤独的状态中发展\"&#125;,&#123;\"famous_name\":\"民谚\",\"famous_saying\":\"名人的古怪行为是天才的标志，凡人的古怪行为是神经出了毛病\"&#125;,&#123;\"famous_name\":\"鲁迅\",\"famous_saying\":\"哪里有天才，我是把别人喝咖啡的工夫都用在了工作上了。\"&#125;,&#123;\"famous_name\":\"塞涅夫\",\"famous_saying\":\"没有某些发狂的劲头，就没有天才。\"&#125;,&#123;\"famous_name\":\"狄德罗\",\"famous_saying\":\"精神的浩瀚想象的活跃心灵的勤奋：就是天才。\"&#125;,&#123;\"famous_name\":\"爱默生\",\"famous_saying\":\"平凡的人希望，天才的人创造。\"&#125;,&#123;\"famous_name\":\"契诃夫\",\"famous_saying\":\"真正的天才是常常隐藏在群众里面，绝不挤向人前去露脸的。\"&#125;,&#123;\"famous_name\":\"别林斯基\",\"famous_saying\":\"任何天才，不经过艰苦不断的劳动，不经过最使空想家头疼和懊恼的最初纯物质和机械的劳动，就无法精通任何种类的艺术。\"&#125;,&#123;\"famous_name\":\"杨格\",\"famous_saying\":\"我愿意以天才比美德，以学问比财富。如美德越少的人，越需要财富，天才越低的人，越需要学问。\"&#125;,&#123;\"famous_name\":\"巴尔扎克\",\"famous_saying\":\"职业尽管不同，但天才的品德并无分别。\"&#125;,&#123;\"famous_name\":\"恩格斯\",\"famous_saying\":\"逆境使天才脱颖而出，顺境会埋没\"&#125;,&#123;\"famous_name\":\"巴尔扎克\",\"famous_saying\":\"破坏的人和建设的人，两者都是意志的现象：一个是准备工作，另一个是完成工作；前者好像是一个恶的天才，后者似乎是一个善的天才；对这一个给予光荣，对另一个给予忘却。恶者哇啦哇啦，把庸俗的人们从梦里惊醒，对他佩服得五体投地，可是善者却一直默不作声。\"&#125;,&#123;\"famous_name\":\"培根\",\"famous_saying\":\"如果孩子确有某种超群的天才，那当然应该扶植发展。但就一般情况说，下面这句格言很有用的：\\u201c长期的训练会通过适应化难为易。\\u201d\"&#125;,&#123;\"famous_name\":\"爱迪生\",\"famous_saying\":\"天才是百分之一的灵感，百分之九十九的血汗。\"&#125;]</span></span><br><span class=\"line\"><span class=\"comment\">     * error_code : 0</span></span><br><span class=\"line\"><span class=\"comment\">     * reason : Succes</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> total;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> error_code;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String reason;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * famous_name : 车尔尼雪夫斯基</span></span><br><span class=\"line\"><span class=\"comment\">     * famous_saying : 非凡的单纯，非凡的明确——这是天才的智慧的最可惊人的品质。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;ResultEntity&gt; result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTotal</span><span class=\"params\">(<span class=\"keyword\">int</span> total)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.total = total;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setError_code</span><span class=\"params\">(<span class=\"keyword\">int</span> error_code)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.error_code = error_code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setReason</span><span class=\"params\">(String reason)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setResult</span><span class=\"params\">(List&lt;ResultEntity&gt; result)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.result = result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getTotal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getError_code</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> error_code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getReason</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reason;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;ResultEntity&gt; <span class=\"title\">getResult</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultEntity</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String famous_name;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String famous_saying;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFamous_name</span><span class=\"params\">(String famous_name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.famous_name = famous_name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFamous_saying</span><span class=\"params\">(String famous_saying)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.famous_saying = famous_saying;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFamous_name</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> famous_name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFamous_saying</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> famous_saying;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"四、实现过程\"><a href=\"#四、实现过程\" class=\"headerlink\" title=\"四、实现过程\"></a><strong>四、实现过程</strong></h3><p>首先， 按照官方的说明，我们需要创建一个接口，返回 Call<famousinfo>；如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GET</span>(<span class=\"string\">\"/avatardata/mingrenmingyan/lookup\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Call&lt;FamousInfo&gt; <span class=\"title\">getFamousResult</span><span class=\"params\">(@Header(<span class=\"string\">\"apiKey\"</span>)</span> String apiKey,</span></span><br><span class=\"line\"><span class=\"function\">                                     @<span class=\"title\">Query</span><span class=\"params\">(<span class=\"string\">\"keyword\"</span>)</span> String keyword,</span></span><br><span class=\"line\"><span class=\"function\">                                     @<span class=\"title\">Query</span><span class=\"params\">(<span class=\"string\">\"page\"</span>)</span> <span class=\"keyword\">int</span> page,</span></span><br><span class=\"line\"><span class=\"function\">                                     @<span class=\"title\">Query</span><span class=\"params\">(<span class=\"string\">\"rows\"</span>)</span> <span class=\"keyword\">int</span> rows)</span>;</span><br></pre></td></tr></table></figure></famousinfo></p>\n<p>这里我们使用的是Retrofit 提供注解的方式来定义接口的</p>\n<ul>\n<li>@get后面我们填写需要访问对应的接口地址</li>\n<li>@Header用来添加Header</li>\n<li>@Query用来添加查询关键字</li>\n</ul>\n<p>现在接口定义好了，我们来<strong> 定义Retrofit 网络接口服务的包装类 </strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.woyou.androidsample;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> retrofit2.GsonConverterFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> retrofit2.Retrofit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Retrofit 网络接口服务的包装类</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by Xiho on 2016/3/14.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RetrofitWrapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> RetrofitWrapper instance;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Retrofit retrofit;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">RetrofitWrapper</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"comment\">//1.创建Retrofit对象</span></span><br><span class=\"line\">        retrofit = <span class=\"keyword\">new</span> Retrofit.Builder().baseUrl(Constant.BASEURL) <span class=\"comment\">// 定义访问的主机地址</span></span><br><span class=\"line\">                .addConverterFactory(GsonConverterFactory.create())  <span class=\"comment\">//解析方法</span></span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 单例模式</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RetrofitWrapper <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (RetrofitWrapper.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> RetrofitWrapper();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">final</span> Class&lt;T&gt; service)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> retrofit.create(service);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">   * Created by Xiho on 2016/3/14. </span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Constant</span> </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> String BASEURL=<span class=\"string\">\"http://apis.baidu.com\"</span>; <span class=\"comment\">//服务器地址   </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> String APIKEY=<span class=\"string\">\"4c4f0c3c49e09d5578ae0ba49fa84a97\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>网络服务的包装类定义好了之后，在定义一个访问的Model（个人编码风格，其实可以更简洁点）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FamousInfoModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> FamousInfoModel famousInfoModel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FamousService mFamousService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 单例模式</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FamousInfoModel <span class=\"title\">getInstance</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (famousInfoModel == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            famousInfoModel = <span class=\"keyword\">new</span> FamousInfoModel(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> famousInfoModel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">FamousInfoModel</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        mFamousService = (FamousService) RetrofitWrapper.getInstance().create(FamousService.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询名人名言</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> famousInfoReq</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Call&lt;FamousInfo&gt; <span class=\"title\">queryLookUp</span><span class=\"params\">(FamousInfoReq famousInfoReq)</span> </span>&#123;</span><br><span class=\"line\">        Call&lt;FamousInfo&gt; infoCall = mFamousService.getFamousResult(famousInfoReq.apiKey, famousInfoReq.keyword, famousInfoReq.page, famousInfoReq.rows);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> infoCall;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"五、如何使用\"><a href=\"#五、如何使用\" class=\"headerlink\" title=\"五、如何使用\"></a><strong>五、如何使用</strong></h3><p>构建好接口以后,可以使用了!</p>\n<p>使用分为四步:</p>\n<ul>\n<li>创建Retrofit对象</li>\n<li>创建访问API的请求</li>\n<li>发送请求</li>\n<li>处理结果<br>主要代码如下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FamousInfoModel famousInfoModel =FamousInfoModel.getInstance(getApplicationContext());</span><br><span class=\"line\"><span class=\"comment\">// 获取事件</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initEvent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mSerachBtn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//创建访问的API请求</span></span><br><span class=\"line\">                Call&lt;FamousInfo&gt; callFamous= famousInfoModel.queryLookUp(initParams());</span><br><span class=\"line\">                <span class=\"comment\">//发送请求</span></span><br><span class=\"line\">                callFamous.enqueue(<span class=\"keyword\">new</span> Callback&lt;FamousInfo&gt;() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call&lt;FamousInfo&gt; call, Response&lt;FamousInfo&gt; response)</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(response.isSuccess())&#123;</span><br><span class=\"line\">                            FamousInfo result = response.body();</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(result!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                                List&lt;FamousInfo.ResultEntity&gt; entity = result.getResult();</span><br><span class=\"line\">                                    mTxtContent.setText(<span class=\"string\">\"1、\"</span>+entity.get(<span class=\"number\">0</span>).getFamous_saying()+<span class=\"string\">\"\\n---\"</span>+entity.get(<span class=\"number\">0</span>).getFamous_name()+<span class=\"string\">\"\\n 2、\"</span></span><br><span class=\"line\">                                            +entity.get(<span class=\"number\">1</span>).getFamous_saying()+<span class=\"string\">\"\\n---\"</span>+entity.get(<span class=\"number\">1</span>).getFamous_name());</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call&lt;FamousInfo&gt; call, Throwable t)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>最后运行的效果图如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20160408133246502\" alt=\"这里写图片描述\"></p>\n<p><strong> 搜索的结果我只是显示了其中一部分，只用来使用Retrofit 这个框架，没有很具体去做一些处理啦，后面还会用一些其他的库，还会使用本Demo 来进行测试，所以这次就简单写了下。</strong>   <br><br>附上源码：<a href=\"http://download.csdn.net/download/u011974987/9461917\" target=\"_blank\" rel=\"noopener\">AndroidRetrofitSample</a>   <br></p>\n<h3 id=\"六、扩展阅读\"><a href=\"#六、扩展阅读\" class=\"headerlink\" title=\"六、扩展阅读\"></a><strong>六、扩展阅读</strong></h3><p><strong> Retrofit:</strong> </p>\n<ul>\n<li>Retrofit 官方文档：<a href=\"http://square.github.io/retrofit/\" target=\"_blank\" rel=\"noopener\">http://square.github.io/retrofit/</a></li>\n<li>Retrofit 使用介绍：<a href=\"http://www.cnblogs.com/angeldevil/p/3757335.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/angeldevil/p/3757335.html</a></li>\n<li>Retrofit 离线缓存策略：<a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0115/3873.html\" target=\"_blank\" rel=\"noopener\">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0115/3873.html</a></li>\n</ul>\n","categories":[{"name":"Android","slug":"Android","count":11,"path":"api/categories/Android.json"}],"tags":[{"name":"Android","slug":"Android","count":11,"path":"api/tags/Android.json"},{"name":"Retrofit","slug":"Retrofit","count":1,"path":"api/tags/Retrofit.json"}]}