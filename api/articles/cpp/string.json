{"title":"C++ String类和字符串的访问和拼接操作","slug":"cpp/string","date":"2016-09-11T06:28:31.000Z","updated":"2017-12-17T17:36:05.000Z","comments":true,"path":"api/articles/cpp/string.json","photos":[],"link":"","excerpt":"C++ 增强了对字符串的支持，除了可以使用c中的字符串，还可以使用内置的数据类型string，string类处理字符串会翻遍很多，完全可以代替C语言中的char 数组和char 指针。使用sting类需要包含头文件&lt; sting &gt;, 下面我们就来介绍怎么使用。string 的几种用法：1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br><br>using namespace std;<br><br>void main()&#123;<br><br>\tstring s1;<br>\tstring s2 = \"c plus plus\";<br>\tstring s3 = s2;<br>\tstring s4(5, 's');<br><br>\tcout &lt;&lt; s1 &lt;&lt; s2 &lt;&lt; s3 &lt;&lt; s4 &lt;&lt; endl;<br><br>\tsystem(\"pause\");<br><br><br>&#125;<br>输出结果：1<br>2<br>c plus plusc plus plussssss<br>请按任意键继续. . .<br>","covers":null,"content":"<p>C++ 增强了对字符串的支持，除了可以使用c中的字符串，还可以使用内置的数据类型string，string类处理字符串会翻遍很多，完全可以代替C语言中的char 数组和char 指针。</p>\n<p>使用sting类需要包含头文件&lt; sting &gt;, 下面我们就来介绍怎么使用。</p>\n<p><strong>string 的几种用法：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s1;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s2 = <span class=\"string\">\"c plus plus\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s3 = s2;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s4</span><span class=\"params\">(<span class=\"number\">5</span>, <span class=\"string\">'s'</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; s1 &lt;&lt; s2 &lt;&lt; s3 &lt;&lt; s4 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c <span class=\"keyword\">plus</span> plusc <span class=\"keyword\">plus</span> plussssss</span><br><span class=\"line\">请按任意键继续. . .</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>上面的几行代码介绍了 几种定义string 类型变量的方法，变量s1只是定义但是没有初始化，编译器会将默认的值附给s1，默认值是””（空字符串）。<br>变量s2再定义的同时被初始化为”c plus plus ”与C语言中的char 字符串不同，string类型的变量结尾没有<br>‘\\0’,string 类型的本质是一个个string类，而我们定义的变量则是一个个的string类的对象，变量s3在定义的时候直接用s2进行初始化，因此s3的内容也是‘c plus plus’。变量s4被初始化为由5个’s’字符串组成的字符串，也就是’sssss‘。</p>\n<hr>\n<p>与C语言中的字符串不同，当我们需要知道字符串长度时，可以调用string类提供的length（）函数。如下所示：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">\"c plus plus\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;len&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>编译运行的结果：</p>\n<p>11</p>\n<p>这里，变量 s 也是 string 类的对象，length() 是它的成员函数。由于 string 变量的末尾没有 ‘\\0’ 字符，所以 length() 返回的是字符串的真实长度，而不是长度 +1。</p>\n<hr>\n<h4 id=\"转换为-char-数组字符串\"><a href=\"#转换为-char-数组字符串\" class=\"headerlink\" title=\"转换为 char 数组字符串\"></a><strong>转换为 char 数组字符串</strong></h4><p> C++虽然提供了string类来替代C语言中的char 数组形式的字符串，但是有时候编程中必须要使用C风格的字符串，为此，string类提供了一个转换的函数c_str();函数能够将 string 变量转换为一个 const 字符串数组的形式，并将指向该数组的指针返回。请看下面的代码：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> filename = <span class=\"string\">\"input.txt\"</span>;</span><br><span class=\"line\">ifstream <span class=\"keyword\">in</span>;</span><br><span class=\"line\"><span class=\"keyword\">in</span>.<span class=\"built_in\">open</span>(filename.c_str());</span><br></pre></td></tr></table></figure>\n<p>为了使用文件打开函数 open()，必须将 string 类型的变量转换为字符串数组。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _ITERATOR_DEBUG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _ITERATOR_DEBUG_LEVEL 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">undef</span> _ITERATOR_DEBUG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _ITERATOR_DEBUG_LEVEL 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//string字符串-&gt;c字符串转换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//string -&gt; char*</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s1 = <span class=\"string\">\"far away\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* c = s1.c_str();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,c);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s2 = c;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//string-&gt;char[]</span></span><br><span class=\"line\">\t<span class=\"comment\">//从string中赋值字符到char[]</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> arr[<span class=\"number\">50</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\ts1.copy(arr,<span class=\"number\">4</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; arr &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译输出结果：</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">far</span> away</span><br><span class=\"line\"><span class=\"keyword\">far</span></span><br><span class=\"line\">请按任意键继续. . .</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"string-字符串的输入输出\"><a href=\"#string-字符串的输入输出\" class=\"headerlink\" title=\"string 字符串的输入输出\"></a><strong>string 字符串的输入输出</strong></h4><p>string类重载了输入输出的运算符，用“&gt;&gt;”进行输入，用”&lt;&lt;”进行输出，请看下面代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; s;  <span class=\"comment\">//输入字符串</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//输出字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">c</span> plus</span><br><span class=\"line\"><span class=\"keyword\">c</span></span><br><span class=\"line\">请按任意键继续. . .</span><br></pre></td></tr></table></figure>\n<p>虽然我们输入了两个由空格隔开的”c plus’,但是只输出了一个，这是因为输入的运算符“&gt;&gt;”默认会忽略空格，遇到空格就认为输入结束，所以最后输入的plus没有被存储到变量里面。</p>\n<hr>\n<h4 id=\"访问字符串中的字符\"><a href=\"#访问字符串中的字符\" class=\"headerlink\" title=\"访问字符串中的字符\"></a><strong>访问字符串中的字符</strong></h4><p>string 字符串也可以像字符串数组一样按照下标来访问其中的每一个字符。string 字符串的起始下标仍是从 0 开始。请看下面的代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//string遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s1 = <span class=\"string\">\"abcdefg\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、数组方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"数组方式:\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s1.length(); i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt;s1[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、迭代方式</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"迭代方式:\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">string</span>::iterator it = s1.begin(); it != s1.end(); it++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;*it&lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组方式:</span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">c</span><br><span class=\"line\">d</span><br><span class=\"line\">e</span><br><span class=\"line\">f</span><br><span class=\"line\">g</span><br><span class=\"line\">迭代方式:</span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">c</span><br><span class=\"line\">d</span><br><span class=\"line\">e</span><br><span class=\"line\">f</span><br><span class=\"line\">g</span><br><span class=\"line\">请按任意键继续. . .</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"字符串的拼接\"><a href=\"#字符串的拼接\" class=\"headerlink\" title=\"字符串的拼接\"></a><strong>字符串的拼接</strong></h4><p>有了string 类，我们可以使用”+“ 或者”+=“运算符来直接拼接字符串，非常方便，再也不需要使用C语言中的strcat(),strcopy(),malloc()等函数来拼接字符串了，再也不用担心空间不够溢出了。<br>下面来看列子：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//字符串拼接</span><br><span class=\"line\"><span class=\"symbol\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">string </span><span class=\"built_in\">s1</span> = <span class=\"string\">\"alan\"</span><span class=\"comment\">;</span></span><br><span class=\"line\">\t<span class=\"keyword\">string </span><span class=\"built_in\">s2</span> = <span class=\"string\">\"xiho\"</span><span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t//<span class=\"number\">1</span>.</span><br><span class=\"line\">\t<span class=\"keyword\">string </span><span class=\"built_in\">s3</span> = <span class=\"built_in\">s1</span> + <span class=\"built_in\">s2</span><span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">string </span><span class=\"built_in\">s4</span> = <span class=\"string\">\" wahaha\"</span><span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t//<span class=\"number\">2</span>.</span><br><span class=\"line\">\t<span class=\"built_in\">s3</span>.append(<span class=\"built_in\">s4</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">s3</span> &lt;&lt; endl<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 输出结果为：</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alanxiho wahaha</span><br><span class=\"line\">请按任意键继续. . .</span><br></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p>学习理解并整理下来的笔记。<br>希望大家能够指点或提出宝贵意见，谢谢！一起学习。 </p>\n</blockquote>\n","categories":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/categories/C-C.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}]}