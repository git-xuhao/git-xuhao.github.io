{"title":"C++ String字符串的增删改查","slug":"cpp/aduc","date":"2016-09-11T09:50:45.000Z","updated":"2017-12-17T17:36:04.000Z","comments":true,"path":"api/articles/cpp/aduc.json","photos":[],"link":"","excerpt":"c++ 提供的string类包含了若干实用的成员函数，大大方便了字符串的增加、删除、更改、查询等操作。插入字符串insert（）函数可以在string字符串中置顶的位置插入另一个字符串，它的原型为：1<br>string&amp; insert (size_t pos, const string&amp; str);<br>看这个插入的格式我们就能猜想到，pos表示要插入的下标；str表示要插入的字符串，它可以是string变量，也可以是C风格的字符串。<br>","covers":null,"content":"<p>c++ 提供的string类包含了若干实用的成员函数，大大方便了字符串的增加、删除、更改、查询等操作。</p>\n<h4 id=\"插入字符串\"><a href=\"#插入字符串\" class=\"headerlink\" title=\"插入字符串\"></a>插入字符串</h4><p>insert（）函数可以在string字符串中置顶的位置插入另一个字符串，它的原型为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span>&amp; <span class=\"title\">insert</span> <span class=\"params\">(<span class=\"keyword\">size_t</span> pos, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; str)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>看这个插入的格式我们就能猜想到，pos表示要插入的下标；str表示要插入的字符串，它可以是string变量，也可以是C风格的字符串。<br><a id=\"more\"></a></p>\n<p>看下面的代码：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;iostream&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;string&gt;</span></span><br><span class=\"line\">using namespace std<span class=\"comment\">;</span></span><br><span class=\"line\">void main()&#123;</span><br><span class=\"line\">\tstring <span class=\"built_in\">s1</span>, <span class=\"built_in\">s2</span>, <span class=\"built_in\">s3</span><span class=\"comment\">;</span></span><br><span class=\"line\">\t<span class=\"built_in\">s1</span> = <span class=\"built_in\">s2</span> = <span class=\"string\">\"1234567890\"</span><span class=\"comment\">;</span></span><br><span class=\"line\">\t<span class=\"built_in\">s3</span> = <span class=\"string\">\"aaa\"</span><span class=\"comment\">;</span></span><br><span class=\"line\">\t<span class=\"built_in\">s1</span>.<span class=\"keyword\">insert(5, </span><span class=\"built_in\">s3</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">s1</span> &lt;&lt; endl<span class=\"comment\">;</span></span><br><span class=\"line\">\t<span class=\"built_in\">s2</span>.<span class=\"keyword\">insert(5, </span><span class=\"string\">\"bbb\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">s2</span> &lt;&lt; endl<span class=\"comment\">;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">12345</span>aaa67890</span><br><span class=\"line\"><span class=\"number\">12345</span>bbb67890</span><br><span class=\"line\">请按任意键继续. . .</span><br></pre></td></tr></table></figure>\n<p>insert()函数的第一个参数有越界的可能，如果越界，则会产生运行时异常。我恶魔你要捕获这个异常。</p>\n<hr>\n<h4 id=\"删除字符串\"><a href=\"#删除字符串\" class=\"headerlink\" title=\"删除字符串\"></a><strong>删除字符串</strong></h4><p>erase()函数可以删除string变量中的一个字符串，原型为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span>&amp; <span class=\"title\">erase</span> <span class=\"params\">(<span class=\"keyword\">size_t</span> pos = <span class=\"number\">0</span>, <span class=\"keyword\">size_t</span> len = npos)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>pos 表示要删除的子字符串的起始下标，len表示要删除子字符串的长度。如果不指明len的话，那么直接删除pos到字符串结束处的所有字符（此时len =str.length-pos)。</p>\n<p>示例代码如下：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;iostream&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;string&gt;</span></span><br><span class=\"line\">using namespace std<span class=\"comment\">;</span></span><br><span class=\"line\">void main()&#123;</span><br><span class=\"line\">    string <span class=\"built_in\">s1</span>, <span class=\"built_in\">s2</span>, <span class=\"built_in\">s3</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"built_in\">s1</span> = <span class=\"built_in\">s2</span> = <span class=\"built_in\">s3</span> = <span class=\"string\">\"1234567890\"</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"built_in\">s2</span>.erase(<span class=\"number\">5</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"built_in\">s3</span>.erase(<span class=\"number\">5</span>, <span class=\"number\">3</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    cout&lt;&lt; <span class=\"built_in\">s1</span> &lt;&lt;endl<span class=\"comment\">;</span></span><br><span class=\"line\">    cout&lt;&lt; <span class=\"built_in\">s2</span> &lt;&lt;endl<span class=\"comment\">;</span></span><br><span class=\"line\">    cout&lt;&lt; <span class=\"built_in\">s3</span> &lt;&lt;endl<span class=\"comment\">;</span></span><br><span class=\"line\">     system(<span class=\"string\">\"pause\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1234567890</span></span><br><span class=\"line\"><span class=\"number\">12345</span></span><br><span class=\"line\"><span class=\"number\">1234590</span></span><br><span class=\"line\">请按任意键继续. . .</span><br></pre></td></tr></table></figure>\n<p>在 pos 参数没有越界的情况下， len 参数也可能会导致要删除的子字符串越界。但实际上这种情况不会发生，erase() 函数会从以下两个值中取出最小的一个作为待删除子字符串的长度：</p>\n<ul>\n<li>len的值</li>\n<li>字符串长度减去 pos 的值。</li>\n</ul>\n<p>简单的说，就是待删除字符串最多只能删除到字符串结尾。</p>\n<hr>\n<h4 id=\"提取字符串\"><a href=\"#提取字符串\" class=\"headerlink\" title=\"提取字符串\"></a><strong>提取字符串</strong></h4><p>substr()函数原型为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">substr</span> <span class=\"params\">(<span class=\"keyword\">size_t</span> pos = <span class=\"number\">0</span>, <span class=\"keyword\">size_t</span> len = npos)</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure>\n<p>pos为要提取的子字符串的起始下标，len为要提取的子字符串的长度。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>  <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s1 = <span class=\"string\">\"first second third\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s2;</span><br><span class=\"line\">\ts2 = s1.substr(<span class=\"number\">6</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; s1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; s2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">first</span> <span class=\"keyword\">second</span> <span class=\"keyword\">third</span></span><br><span class=\"line\"><span class=\"keyword\">second</span></span><br><span class=\"line\">请按任意键继续. . .</span><br></pre></td></tr></table></figure>\n<p>系统对 substr() 参数的处理和 erase() 类似：</p>\n<ul>\n<li>如果 pos 越界，会抛出异常；</li>\n<li>如果 len 越界，会提取从 pos 到字符串结尾处的所有字符。</li>\n</ul>\n<hr>\n<h4 id=\"字符串的查找\"><a href=\"#字符串的查找\" class=\"headerlink\" title=\"字符串的查找\"></a><strong>字符串的查找</strong></h4><h5 id=\"find-函数\"><a href=\"#find-函数\" class=\"headerlink\" title=\"find()函数\"></a><strong>find()函数</strong></h5><p>find（）函数用于string字符串中查找子字符串出现的位置，它的原型为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">size_t</span> find (<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; str, <span class=\"keyword\">size_t</span> pos = <span class=\"number\">0</span>) <span class=\"keyword\">const</span>;</span><br><span class=\"line\"><span class=\"keyword\">size_t</span> find (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* s, <span class=\"keyword\">size_t</span> pos = <span class=\"number\">0</span>) <span class=\"keyword\">const</span>;</span><br></pre></td></tr></table></figure>\n<p>第一个参数的表示为待查找的子字符串，它可以是string变量，也可以是C风格的字符串，第二个参数表示开始查找的位置（下标）；</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/字符串查找替换</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s1 = <span class=\"string\">\"apple google apple iphone\"</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//从0开始查找\"google\"的位置</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> idx = s1.find(<span class=\"string\">\"google\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; idx &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//统计apple出现的次数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> idx_app = s1.find(<span class=\"string\">\"apple\"</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//npos大于任何有效下标的值</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (idx_app != <span class=\"built_in\">string</span>::npos)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnum++;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"找到的索引:\"</span> &lt;&lt; idx_app &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tidx_app+=<span class=\"number\">5</span>;</span><br><span class=\"line\">\t\tidx_app = s1.find(<span class=\"string\">\"apple\"</span>, idx_app);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br><span class=\"line\">找到的索引<span class=\"selector-pseudo\">:0</span></span><br><span class=\"line\">找到的索引<span class=\"selector-pseudo\">:13</span></span><br><span class=\"line\">2</span><br><span class=\"line\">请按任意键继续. . .</span><br></pre></td></tr></table></figure>\n<p>find函数最终返回的是子字符串 第一次出现在字符串的其实下标，如果没有查找到子字符串，那么会返回一个无穷大的值 4294967295。统计apple出现的次数。先查找第一次出现的位置，接着<br>和npos大于任何有效下标的值，来判断，while循环，每次加上自身的长度，最后统计出现的次数。。。</p>\n<hr>\n<h5 id=\"rfind-函数\"><a href=\"#rfind-函数\" class=\"headerlink\" title=\"rfind()函数\"></a><strong>rfind()函数</strong></h5><p>rfind() 和 find() 很类似，同样是在字符串中查找子字符串，不同的是 find() 函数从第二个参数开始往后查找，而 rfind() 函数则最多查找到第二个参数处，如果到了第二个参数所指定的下标还没有找到子字符串，则返回一个无穷大值4294967295。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s1 = <span class=\"string\">\"first second third\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s2 = <span class=\"string\">\"second\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index = s1.rfind(s2, <span class=\"number\">6</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index &lt; s1.length())</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Found at index : \"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Not found\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行的结果为：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found <span class=\"keyword\">at</span> index : 6</span><br><span class=\"line\">请按任意键继续. . .</span><br></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"find-first-of-函数\"><a href=\"#find-first-of-函数\" class=\"headerlink\" title=\"find_first_of() 函数\"></a><strong>find_first_of() 函数</strong></h5><p>find_first_of() 函数用于查找子字符串和字符串共同具有的字符在再辅传中首先出现的位置。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s1 = <span class=\"string\">\"first second second third\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s2 = <span class=\"string\">\"asecond\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = s1.find_first_of(s2);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index &lt; s1.length())</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Found at index : \"</span>&lt;&lt; index &lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Not found\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果为：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found <span class=\"keyword\">at</span> index : 3</span><br></pre></td></tr></table></figure>\n<p>s1 和 s2 共同具有的字符是 ’s’，该字符在 s1 中首次出现的下标是3，故查找结果返回3。</p>\n<blockquote>\n<p>学习理解并整理下来的笔记。<br>希望大家能够指点或提出宝贵意见，谢谢！一起学习。 </p>\n</blockquote>\n","categories":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/categories/C-C.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}]}