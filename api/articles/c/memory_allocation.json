{"title":"C语言（五）内存分配与释放","slug":"c/memory_allocation","date":"2016-08-23T05:10:26.000Z","updated":"2017-12-18T16:01:01.000Z","comments":true,"path":"api/articles/c/memory_allocation.json","photos":[],"link":"","excerpt":"首先我们来科普一下：什么是堆？说到堆，又忍不住说到了栈！什么是 栈？1、什么是堆：堆是大家共有的空间，分全局堆和局部堆。全局堆就是所有没有分配的空间，局部堆就是用户分配的空间。堆在操作系统对进程 初始化的时候分配，运行过程中也可以向系统要额外的堆，但是记得用完了要还给操作系统，要不然就是内存泄漏。<br>2、什么是栈：栈是线程独有的，保存其运行状态和局部自动变量的。栈在线程开始的时候初始化，每个线程的栈互相独立。每个函数都有自己的栈，栈被用来在函数之间传递参数。操作系统在切换线程的时候会自动的切换栈，就是切换SS/ESP寄存器。栈空间不需要在高级语言里面显式的分配和释放。<br>","covers":null,"content":"<p>首先我们来科普一下：</p>\n<h2 id=\"什么是堆？说到堆，又忍不住说到了栈！什么是-栈？\"><a href=\"#什么是堆？说到堆，又忍不住说到了栈！什么是-栈？\" class=\"headerlink\" title=\"什么是堆？说到堆，又忍不住说到了栈！什么是 栈？\"></a><strong>什么是堆？说到堆，又忍不住说到了栈！什么是 栈？</strong></h2><p><strong>1、什么是堆：</strong>堆是大家共有的空间，分全局堆和局部堆。全局堆就是所有没有分配的空间，局部堆就是用户分配的空间。堆在操作系统对进程 初始化的时候分配，运行过程中也可以向系统要额外的堆，但是记得用完了要还给操作系统，要不然就是内存泄漏。<br><strong>2、什么是栈：</strong>栈是线程独有的，保存其运行状态和局部自动变量的。栈在线程开始的时候初始化，每个线程的栈互相独立。每个函数都有自己的栈，栈被用来在函数之间传递参数。操作系统在切换线程的时候会自动的切换栈，就是切换SS/ESP寄存器。栈空间不需要在高级语言里面显式的分配和释放。<br><a id=\"more\"></a> </p>\n<h2 id=\"C语言程序编译的内存分配，堆与栈的区别：\"><a href=\"#C语言程序编译的内存分配，堆与栈的区别：\" class=\"headerlink\" title=\"C语言程序编译的内存分配，堆与栈的区别：\"></a><strong>C语言程序编译的内存分配，堆与栈的区别：</strong></h2><ul>\n<li>栈是由编译器自动分配释放，存放函数的参数值、局部变量的值等。操作方式类似于数据结构中的栈。<br>堆一般由程序员分配释放，若不释放，程序结束时可能由OS回收。注意这里说是可能，并非一定。再强调一次，记得要释放！</li>\n<li>栈区(stack) :<br>   //windows下，栈内存分配2M（确定的常数），超出了限制，提示stack overflow错误<br> //编译器自动分配释放，主要存放函数的参数值，局部变量值等；</li>\n<li><p>堆区(heap)：程序员手动分配释放，操作系统80%内存</p>\n</li>\n<li><p>全局区或静态区：存放全局变量和静态变量；程序结束时由系统释放，分为全局初始化区和全局未初始化区；</p>\n</li>\n<li><p>字符常量区：常量字符串放与此，程序结束时由系统释放；</p>\n</li>\n<li><p>程序代码区：存放函数体的二进制代码。</p>\n</li>\n</ul>\n<p>栗子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a=<span class=\"number\">0</span>;        <span class=\"comment\">//全局初始化区</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *p1;       <span class=\"comment\">//全局未初始化区</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> b;          <span class=\"comment\">//栈</span></span><br><span class=\"line\">   <span class=\"keyword\">char</span> s[]=<span class=\"string\">\"bb\"</span>;  <span class=\"comment\">//栈</span></span><br><span class=\"line\">   <span class=\"keyword\">char</span> *p2;       <span class=\"comment\">//栈</span></span><br><span class=\"line\">   <span class=\"keyword\">char</span> *p3=<span class=\"string\">\"123\"</span>; <span class=\"comment\">//其中，“123\\0”常量区，p3在栈区</span></span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> c=<span class=\"number\">0</span>; <span class=\"comment\">//全局区</span></span><br><span class=\"line\">   p1=(<span class=\"keyword\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">10</span>);   <span class=\"comment\">//10个字节区域在堆区</span></span><br><span class=\"line\">   <span class=\"built_in\">strcpy</span>(p1,<span class=\"string\">\"123\"</span>);    <span class=\"comment\">//\"123\\0\"在常量区，编译器 可能 会优化为和p3的指向同一块区域</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>栈内存</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">stackFun</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t<span class=\"comment\">//栈内存自动释放</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>堆内存</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">heapFun</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//40M内存</span></span><br><span class=\"line\">\t<span class=\"comment\">//字节</span></span><br><span class=\"line\">\t<span class=\"comment\">//void *任意类型的指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* p = <span class=\"built_in\">malloc</span>(<span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">10</span> * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//释放</span></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">void</span> <span class=\"selector-tag\">main</span>()&#123;\t</span><br><span class=\"line\">\t<span class=\"comment\">//在堆内存上，分配40M的内存</span></span><br><span class=\"line\">\t<span class=\"selector-tag\">while</span> (<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"selector-tag\">Sleep</span>(<span class=\"number\">1000</span>);\t</span><br><span class=\"line\">\t\t<span class=\"selector-tag\">stackFun</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"selector-tag\">getchar</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个数组，动态指定数组的大小（在程序运行过长中，可以随意的开辟指定大小的内存，以供使用，相当于Java中的集合）<br><strong>静态内存分配</strong>，分配内存大小的是固定，问题：1.很容易超出栈内存的最大值 2.为了防止内存不够用会开辟更多的内存，容易浪费内存</p>\n<p><strong>动态内存分配</strong>，在程序运行过程中，动态指定需要使用的内存大小，手动释放，释放之后这些内存还可以被重新使用（活水）</p>\n<p><strong>函数：calloc()  分配内存空间并初始化</strong><br>calloc() 函数用来动态地分配内存空间并初始化为 0，其原型为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">calloc</span> <span class=\"params\">(<span class=\"keyword\">size_t</span> num, <span class=\"keyword\">size_t</span> size)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>calloc() 在内存中动态地分配 num 个长度为 size 的连续空间，并将每一个字节都初始化为 0。所以它的结果是分配了 num*size 个字节长度的内存空间，并且每个字节的值都是0。</p>\n<p>【返回值】分配成功返回指向该内存的地址，失败则返回 NULL。</p>\n<p><strong>函数：malloc() 动态地分配内存空间</strong></p>\n<p>malloc() 函数用来动态地分配内存空间（如果你不了解动态内存分配，请查看：C语言动态内存分配及变量存储类别），其原型为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">malloc</span> <span class=\"params\">(<span class=\"keyword\">size_t</span> size)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>应用在程序中代码如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//静态内存分配创建数组，数组的大小是固定的</span></span><br><span class=\"line\">\t<span class=\"comment\">//int i = 10;</span></span><br><span class=\"line\">\t<span class=\"comment\">//int a[i];</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"输入数组的长度：\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;len);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//开辟内存，大小len*4字节</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* p = <span class=\"built_in\">malloc</span>(len * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">\t<span class=\"comment\">//p是数组的首地址，p就是数组的名称</span></span><br><span class=\"line\">\t<span class=\"comment\">//给数组元素赋值（使用这一块刚刚开辟出来的内存区域）</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; i &lt; len - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">\t\tp[i] = rand() % <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d,%#x\\n\"</span>, p[i], &amp;p[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//手动释放内存 </span></span><br><span class=\"line\">\t<span class=\"comment\">//free()释放动态分配的内存空间</span></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(p);</span><br><span class=\"line\"></span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>realloc 重新分配内存</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"第一次输入数组的长度：\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;len);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//int* p = malloc(len * sizeof(int));\t</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* p = <span class=\"built_in\">calloc</span>(len, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; i &lt; len; i++)&#123;</span><br><span class=\"line\">\t\tp[i] = rand() % <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d,%#x\\n\"</span>, p[i], &amp;p[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> addLen;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"输入数组增加的长度：\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;addLen);</span><br><span class=\"line\">\t<span class=\"comment\">//内存不够用，扩大刚刚分配的内存空间</span></span><br><span class=\"line\">\t<span class=\"comment\">//1.原来内存的指针 2.内存扩大之后的总大小\t\t</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* p2 = <span class=\"built_in\">realloc</span>(p, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (len + addLen));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p2 == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"重新分配失败，世界那么大，容不下我。。。\"</span>);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"新分配内存的两种情况：\"><a href=\"#新分配内存的两种情况：\" class=\"headerlink\" title=\"新分配内存的两种情况：\"></a><strong>新分配内存的两种情况：</strong></h2><p>   //缩小，缩小的那一部分数据会丢失<br>    //扩大，（连续的）<br>    1.如果当前内存段后面有需要的内存空间，直接扩展这段内存空间，realloc返回原指针<br>    2.如果当前内存段后面的空闲字节不够，那么就使用堆中的第一个能够满足这一要求的内存块，将目前的数据复制到新的位置，并将原来的数据库释放掉，返回新的内存地址<br>    3.如果申请失败，返回NULL，原来的指针仍然有效<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接着上面的代码重新赋值</span></span><br><span class=\"line\">\ti = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"--------------------------\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; i &lt; len + addLen; i++)&#123;</span><br><span class=\"line\">\t\tp2[i] = rand() % <span class=\"number\">200</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d,%#x\\n\"</span>, p2[i], &amp;p2[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//手动释放内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">\t\tp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p2 != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(p2);</span><br><span class=\"line\">\t\tp2 = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"内存分配的几个注意细节\"><a href=\"#内存分配的几个注意细节\" class=\"headerlink\" title=\"内存分配的几个注意细节\"></a><strong>内存分配的几个注意细节</strong></h2><p>1.不能多次释放；<br>2.释放完之后（指针仍然有值），给指针置NULL，标志释放完成；<br>3.内存泄露（p重新赋值之后，再free，并没有真正释放内存）；</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"输入数组的长度：\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;len);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* p = <span class=\"built_in\">malloc</span>(len * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; i &lt; len; i++)&#123;</span><br><span class=\"line\">\t\tp[i] = rand() % <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d,%#x\\n\"</span>, p[i], &amp;p[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">\t\tp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就是C语言中对内存的分配与释放，常用的几个函数~</p>\n<p>CSDN</p>\n<h2 id=\"更多系列相关文章传送门：\"><a href=\"#更多系列相关文章传送门：\" class=\"headerlink\" title=\"更多系列相关文章传送门：\"></a>更多系列相关文章传送门：</h2><p><a href=\"http://blog.csdn.net/u011974987/article/details/52138798\" target=\"_blank\" rel=\"noopener\">C语言（一）基本数据类型</a><br><a href=\"http://blog.csdn.net/u011974987/article/details/52142794\" target=\"_blank\" rel=\"noopener\">C语言（二）有符号数和无符号数的理解</a><br><a href=\"http://blog.csdn.net/u011974987/article/details/52200178\" target=\"_blank\" rel=\"noopener\">C语言（三）字符串处理函数</a><br><a href=\"http://blog.csdn.net/u011974987/article/details/52270018\" target=\"_blank\" rel=\"noopener\">C语言（四）指针概念的理解</a><br><a href=\"http://blog.csdn.net/u011974987/article/details/52290724\" target=\"_blank\" rel=\"noopener\">C语言（五）内存的分配与释放</a><br><a href=\"http://blog.csdn.net/u011974987/article/details/52305364\" target=\"_blank\" rel=\"noopener\">C语言（六）结构体和联合体</a><br><a href=\"http://blog.csdn.net/u011974987/article/details/52354074\" target=\"_blank\" rel=\"noopener\">C语言（七）文件的相关操作</a></p>\n<blockquote>\n<p>学习理解并整理下来的笔记。<br>希望大家能够指点或提出宝贵意见，谢谢！一起学习。</p>\n</blockquote>\n","categories":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/categories/C-C.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}]}