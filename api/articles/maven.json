{"title":"使用Gradle和Nexus 搭建私有Maven仓库","slug":"maven","date":"2016-08-30T13:21:06.000Z","updated":"2017-12-18T12:29:40.000Z","comments":true,"path":"api/articles/maven.json","photos":[],"link":"","excerpt":"前言：随着业务的增长，需求量增多，我们的App 组件也越来越多，几乎大部分组件都有用到同样的第三方库和公司内部封装的库，而团队中的所有人都重复的从maven 远程的中央仓库下载构建，这样就会加大了仓库的负载和浪费了外网的带宽，网速慢的话，就要等很久很久，半个小时，几个小时，都有可能！这样明显影响项目的开发进度，有的公司还是在内网的情况下开发，连接不到中央仓库怎么办？公司内部开发的公共组件怎么让其他项目共用呢？这个时候，我们不得不为自己的团队搭建一个私服maven仓库，来提高我们的开发效率。起初，对gradle和maven不是很熟，看了网上的教程一脸懵逼，后来，花了点时间，发现整个过程也还是很简单的。↓↓首先我们来了解一下，一、什么是Maven,Gradle?Maven 是一个项目管理和自动构建工具。Maven 包集中存放的地方，就是 Maven 仓库。这些仓库，可以是放在本地，也可以放在某个远程服务器上。 可以是私有仓库，也可以是公开的。下开发用的库列表：1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>mavenCentral();<br>jcenter()<br>maven &#123;<br>     url 'file:///Users/my-user-name/Documents/Android/repo/'<br>&#125;<br>maven &#123;<br>    url 'http://localhost:8081/nexus/content/repositories/releases/'<br>&#125;<br>","covers":["http://img.blog.csdn.net/20160830184129972","http://img.blog.csdn.net/20160830185642150","http://img.blog.csdn.net/20160830190207761","http://img.blog.csdn.net/20160830190723138","http://img.blog.csdn.net/20160830195149877","http://img.blog.csdn.net/20160830202410813","http://img.blog.csdn.net/20160830203501192","http://img.blog.csdn.net/20160830203919352","http://img.blog.csdn.net/20160830204825029","http://img.blog.csdn.net/20160830205442120","http://img.blog.csdn.net/20160830205622888"],"content":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a><strong>前言：</strong></h2><p>随着业务的增长，需求量增多，我们的App 组件也越来越多，几乎大部分组件都有用到同样的第三方库和公司内部封装的库，而团队中的所有人都重复的从maven 远程的中央仓库下载构建，这样就会加大了仓库的负载和浪费了外网的带宽，网速慢的话，就要等很久很久，半个小时，几个小时，都有可能！这样明显影响项目的开发进度，有的公司还是在内网的情况下开发，连接不到中央仓库怎么办？公司内部开发的公共组件怎么让其他项目共用呢？这个时候，我们不得不为自己的团队搭建一个私服maven仓库，来提高我们的开发效率。</p>\n<p>起初，对gradle和maven不是很熟，看了网上的教程一脸懵逼，后来，花了点时间，发现整个过程也还是很简单的。↓↓</p>\n<p>首先我们来了解一下，</p>\n<h2 id=\"一、什么是Maven-Gradle\"><a href=\"#一、什么是Maven-Gradle\" class=\"headerlink\" title=\"一、什么是Maven,Gradle?\"></a><strong>一、什么是Maven,Gradle?</strong></h2><p><strong>Maven</strong> 是一个项目管理和自动构建工具。Maven 包集中存放的地方，就是 Maven 仓库。这些仓库，可以是放在本地，也可以放在某个远程服务器上。 可以是私有仓库，也可以是公开的。下开发用的库列表：</p>\n<figure class=\"highlight puppet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mavenCentral();</span><br><span class=\"line\">jcenter()</span><br><span class=\"line\"><span class=\"keyword\">maven</span> &#123;</span><br><span class=\"line\">     url <span class=\"string\">'file:///Users/my-user-name/Documents/Android/repo/'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">maven</span> &#123;</span><br><span class=\"line\">    url <span class=\"string\">'http://localhost:8081/nexus/content/repositories/releases/'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>Android Studio Gradle 主要支持两个 Maven 中央库：mavenCentral 和 jcenter。</p>\n<ul>\n<li>mavenCentral 是最早的 maven 中央仓库</li>\n<li>jcenter 是 Android Studio 0.8 版本起的默认 maven 中央仓库</li>\n<li>第三个是我的本机的仓库</li>\n<li>第四个是笔者部署在内网服务器的私有仓库</li>\n</ul>\n<p><strong>Gradle</strong> 是一个基于Apache Ant和Apache Maven概念的项目自动化建构工具。它使用一种基于Groovy的特定领域语言来声明项目设置，而不是传统的XML</p>\n<h2 id=\"二、使用Nexus搭建maven私服\"><a href=\"#二、使用Nexus搭建maven私服\" class=\"headerlink\" title=\"二、使用Nexus搭建maven私服 \"></a><strong>二、使用Nexus搭建maven私服 </strong></h2><h3 id=\"1-Nexus-下载安装：\"><a href=\"#1-Nexus-下载安装：\" class=\"headerlink\" title=\"1.Nexus  下载安装：\"></a>1.Nexus  下载安装：</h3><p>官网下载地址：<a href=\"http://www.sonatype.org/nexus/go/，我的开发环境是Windows，我下载的是Nexus\" target=\"_blank\" rel=\"noopener\">http://www.sonatype.org/nexus/go/，我的开发环境是Windows，我下载的是Nexus</a> Repository Manager OSS 2.xx下面的 All platforms    nexus-2.13.0-01-bundle.zip压缩文件。↓<br><img src=\"http://img.blog.csdn.net/20160830184129972\" alt=\"这里写图片描述\"></p>\n<h3 id=\"2-Nexus-启动：\"><a href=\"#2-Nexus-启动：\" class=\"headerlink\" title=\"2.Nexus 启动：\"></a>2.Nexus 启动：</h3><p>下载完成之后，解压后进入\\nexus-2.1.2-bundle\\nexus-2.1.2\\bin\\jsw\\，根据操作系统类型选择文件夹，我选的是windows-x86-32文件夹，进入后可看到如下所示bat文件。<br><img src=\"http://img.blog.csdn.net/20160830185642150\" alt=\"这里写图片描述\"></p>\n<p>双击console-nexus.bat运行。再浏览器中输入<a href=\"http://127.0.0.1:8081/nexus/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8081/nexus/，</a>出现图（2）所示就代表nexus已经启动成功了。</p>\n<p><img src=\"http://img.blog.csdn.net/20160830190207761\" alt=\"这里写图片描述\"><br>图(2)</p>\n<p> 8081是默认的端口号，要修改端口号，进入\\conf\\打开nexus.properties文件，修改application-port属性值就可以了。<br>默认的用户名和密码分别是：admin和admin123。点击右上角的log in 登录后如图所示：<br>点击左侧的 repositories 查看现有的仓库列表：<br><img src=\"http://img.blog.csdn.net/20160830190723138\" alt=\"这里写图片描述\"></p>\n<h3 id=\"3-Nexus仓库：\"><a href=\"#3-Nexus仓库：\" class=\"headerlink\" title=\"3.Nexus仓库：\"></a>3.Nexus仓库：</h3><p> <strong>这里的仓库分了四种类型</strong></p>\n<ol>\n<li>hosted(宿主仓库):用来部署自己,第三方或者公共仓库的构件</li>\n<li>proxy(代理仓库):代理远程仓库</li>\n<li>virtual(虚拟仓库):默认提供了一个 Central M1虚拟仓库 用来将maven 2适配为maven 1</li>\n<li>group(仓库组):统一管理多个仓库</li>\n</ol>\n<p><font color=\"blue\" size=\"5\">Public Repositories:  仓库组</font></p>\n<p><strong>3rd party:</strong> 无法从公共仓库获得的第三方发布版本的构件仓库</p>\n<p><strong>Apache Snapshots:</strong> 用了代理ApacheMaven仓库快照版本的构件仓库</p>\n<p><strong>Central:</strong> 用来代理maven中央仓库中发布版本构件的仓库</p>\n<p><strong>Central M1 shadow:</strong> 用于提供中央仓库中M1格式的发布版本的构件镜像仓库</p>\n<p><strong>Codehaus Snapshots:</strong> 用来代理CodehausMaven 仓库的快照版本构件的仓库</p>\n<p><strong>Releases:</strong> 用来部署管理内部的发布版本构件的宿主类型仓库</p>\n<p><strong>Snapshots:</strong>用来部署管理内部的快照版本构件的宿主类型仓库</p>\n<h3 id=\"4-建立Nexus宿主仓库\"><a href=\"#4-建立Nexus宿主仓库\" class=\"headerlink\" title=\"4.建立Nexus宿主仓库\"></a>4.建立Nexus宿主仓库</h3><p> 新建一个内部仓库，步骤为Repositories –&gt; Add –&gt; Hosted Repository，在页面的下半部分输入框中填入Repository ID和Repository Name即可，另外把Deployment Policy设置为<strong>Allow Redeploy</strong>，点击save就创建完成了。这里我点击添加宿主类型的仓库，在仓库列表的下方会出现新增仓库的配置，如下所示：<br> <img src=\"http://img.blog.csdn.net/20160830195149877\" alt=\"这里写图片描述\"></p>\n<p>建立好新的仓库之后需要配置一下相关账号信息.在安全选项下选择用户选项,可以看到三个默认的账号,分别是管理员账号,部署账号和Nexus账号.正常访问仓库内容的时候是不需要这三个账户的,一般也就是把部署账号暴露出去,方便仓库项目维护人员部署项目使用.所以这里可以用默认的Deployment账户(记得重置下密码).也可以新建一个账号来使用,新建的时候可以通过add role management来控制该账号的权限。<br>点击新建的仓库的url可以直接如今仓库的路劲，因为现在还没有部署项目，所以是空的仓库。</p>\n<p><font color=\"black\" size=\"5\">至此，搭建私服的maven仓库就已经完成，下面继续介绍Android 端在AS 上面的应用。</font></p>\n<h2 id=\"三、上传库到Maven仓库\"><a href=\"#三、上传库到Maven仓库\" class=\"headerlink\" title=\"三、上传库到Maven仓库\"></a><strong>三、上传库到Maven仓库</strong></h2><p> 上传库到maven仓库有两种方式，我们先来介绍第一种：</p>\n<ol>\n<li>首先我们创建一个新的AndroidStudio 项目，然后新建一个module，选择Android Library。</li>\n</ol>\n<p><img src=\"http://img.blog.csdn.net/20160830202410813\" alt=\"这里写图片描述\"></p>\n<p>然后，我们随便写一个功能供别人使用。例如我写一个ToastUtils：</p>\n<p><img src=\"http://img.blog.csdn.net/20160830203501192\" alt=\"这里写图片描述\"></p>\n<p>然后RebuildProject生成依赖的arr包。</p>\n<p>2.在MavenRepoDemo项目的根目录的build.gradle中配置刚刚建立的仓库：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">allprojects</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven&#123; url <span class=\"string\">'http://localhost:8081/nexus/content/repositories/releases/'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">task</span> clean(type: <span class=\"keyword\">Delete</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> rootProject.buildDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在同目录下配置gradle.properties文件，定义通用属性，方便如果有多个库需要部署时，不需要修改每一个库中的配置：</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Maven仓库的URL</span></span><br><span class=\"line\"><span class=\"attribute\">MAVEN_REPO_RELEASE_URL</span>=http://localhost:8081/nexus/content/repositories/releases/</span><br><span class=\"line\"><span class=\"attribute\">MAVEN_REPO_SNAPSHOT_URL</span>=http://localhost:8081/nexus/content/repositories/snapshots/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#对应maven的GroupId的值</span></span><br><span class=\"line\">GROUP = common</span><br><span class=\"line\"><span class=\"comment\">#登录nexus ossde的用户名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">NEXUS_USERNAME</span>=admin</span><br><span class=\"line\"><span class=\"comment\">#登录nexus oss的密码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">NEXUS_PASSWORD</span>=admin123</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># groupid</span></span><br><span class=\"line\">GROUP_ID = common</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># type</span></span><br><span class=\"line\">TYPE = aar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># description</span></span><br><span class=\"line\">DESCRIPTION = This is Toast lib</span><br></pre></td></tr></table></figure>\n<p>这里的仓库我用的是Nexus 原有的仓库（你可以换成刚刚新建的仓库地址）。</p>\n<ol>\n<li>修改module对应的build.gradle文件，添加以下配置：</li>\n</ol>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">'com.android.library'</span></span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: <span class=\"string\">'maven'</span></span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">23</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.3\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        minSdkVersion <span class=\"number\">19</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">23</span></span><br><span class=\"line\">        versionCode <span class=\"number\">1</span></span><br><span class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled <span class=\"keyword\">false</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">sourceSets</span> &#123;</span><br><span class=\"line\">        main &#123;</span><br><span class=\"line\">            jniLibs.srcDirs = [<span class=\"string\">'libs'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    lintOptions &#123;</span><br><span class=\"line\">        abortOnError <span class=\"keyword\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"keyword\">fileTree</span>(dir: <span class=\"string\">'libs'</span>, <span class=\"keyword\">include</span>: [<span class=\"string\">'*.jar'</span>])</span><br><span class=\"line\">    testCompile <span class=\"string\">'junit:junit:4.12'</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:appcompat-v7:23.4.0'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">    configuration = <span class=\"keyword\">configurations</span>.archives</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        mavenDeployer &#123;</span><br><span class=\"line\">            snapshotRepository(url: MAVEN_REPO_SNAPSHOT_URL) &#123;</span><br><span class=\"line\">                authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            repository(url: MAVEN_REPO_RELEASE_URL) &#123;</span><br><span class=\"line\">                authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pom.<span class=\"keyword\">project</span> &#123;</span><br><span class=\"line\">                version <span class=\"string\">'1.0.0'</span></span><br><span class=\"line\">                artifactId <span class=\"string\">'toastutils-lib'</span></span><br><span class=\"line\">                groupId GROUP_ID</span><br><span class=\"line\">                packaging TYPE</span><br><span class=\"line\">                <span class=\"keyword\">description</span> <span class=\"keyword\">DESCRIPTION</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">artifacts</span> &#123;</span><br><span class=\"line\">    archives <span class=\"keyword\">file</span>(<span class=\"string\">'toastutils.aar'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在as右边栏，找到Gradle打开如下：<br><img src=\"http://img.blog.csdn.net/20160830203919352\" alt=\"这里写图片描述\"></li>\n</ol>\n<p>然后双击uploadArchives，编译脚本并上传arr文件到私有仓库，最后在控制台可以看到日志是否上传成功。</p>\n<p>可以去仓库查看到刚刚上传的库文件：</p>\n<p><img src=\"http://img.blog.csdn.net/20160830204825029\" alt=\"这里写图片描述\"></p>\n<p>第二种，就是直接通过Nexus直接上传，这种就不详细说了，有兴趣的自己去研究下吧！ 嘿嘿</p>\n<h2 id=\"四、在项目中应用\"><a href=\"#四、在项目中应用\" class=\"headerlink\" title=\"四、在项目中应用\"></a><strong>四、在项目中应用</strong></h2><ol>\n<li>在项目的根目录build.gradle配置如下：</li>\n</ol>\n<p><img src=\"http://img.blog.csdn.net/20160830205442120\" alt=\"这里写图片描述\"></p>\n<ol>\n<li>在app目录下的build.gradle配置如下：</li>\n</ol>\n<p><img src=\"http://img.blog.csdn.net/20160830205622888\" alt=\"这里写图片描述\"></p>\n<p> 这样我们就完工了。在项目中调用我们库了，别人按照上面的配置就可以引用库使用了。</p>\n<p><font color=\"black\" size=\"5\"><strong>附上Demo的GitHub项目源码</strong>：<a href=\"https://github.com/git-xuhao/MavenRepoDemo\" target=\"_blank\" rel=\"noopener\">MavenRepoDemo</a></font></p>\n<p>对于频繁更新的子项目是否适合采用这种方式。因为每次变动都需要上传，而主项目在引用该AAR的时候则需要每次都去检查是否更新， 这会使得编译时间大大增加，有了这个maven库，就不用那么麻烦了。</p>\n<h2 id=\"想了解更多有关的资料：\"><a href=\"#想了解更多有关的资料：\" class=\"headerlink\" title=\"想了解更多有关的资料：\"></a><strong>想了解更多有关的资料：</strong></h2><p> <a href=\"http://blog.csdn.net/liujiahan629629/article/details/39272321\" target=\"_blank\" rel=\"noopener\">Nexus私服使Maven更加强大</a></p>\n<p> <a href=\"http://kvh.io/tags/EmbraceAndroidStudio/\" target=\"_blank\" rel=\"noopener\">拥抱的androidStudio 系列文章 博客比较全</a></p>\n<blockquote>\n<p>学习理解并整理下来的笔记；<br>希望大家能够指点或提出宝贵意见，谢谢！一起学习；</p>\n</blockquote>\n","categories":[{"name":"教程","slug":"教程","count":2,"path":"api/categories/教程.json"}],"tags":[{"name":"maven","slug":"maven","count":1,"path":"api/tags/maven.json"}]}